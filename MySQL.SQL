DROP DATABASE IF EXISTS PFIDUCIAL;
CREATE DATABASE PFIDUCIAL;
USE PFIDUCIAL;


SET GLOBAL event_scheduler = ON;
SET SQL_SAFE_UPDATES = 0;


/*TABLA USUARIOS*/
CREATE TABLE  USUARIOS
(
ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
EMAIL VARCHAR(50) NOT NULL UNIQUE,
NOMBRES VARCHAR(20) NOT NULL,
APELLIDOS VARCHAR(20) NOT NULL,
CLAVE VARBINARY(100) NOT NULL,
PRIVILEGIOS VARCHAR(13) NOT NULL CHECK (PRIVILEGIOS IN ('ADMINISTRADOR','EJECUTIVO')),
CCLAVE CHAR(1) NOT NULL DEFAULT 'F' CHECK (CCLAVE IN ('T','F')),
ESTATUS CHAR(1) NOT NULL DEFAULT 'T' CHECK (ESTATUS IN ('T','F')),
TOKEN TEXT NOT NULL
);


insert into USUARIOS(ID_USUARIO,EMAIL,NOMBRES,APELLIDOS,CLAVE,PRIVILEGIOS,CCLAVE,ESTATUS,TOKEN)
VALUES (1,'root@harbest.net','ADMIN','HARBEST',aes_encrypt('24MO410W','root@harbest.net'),'ADMINISTRADOR','T','T','administrador');


CREATE VIEW VW_USERS
AS SELECT ID_USUARIO, concat(NOMBRES,' ',APELLIDOS) as NOMBRE FROM USUARIOS where PRIVILEGIOS = 'EJECUTIVO' AND ESTATUS = 'T';
/*FIN DE TABLA USUARIOS*/


/*TABLA CLIENTES*/
CREATE TABLE CLIENTES
(
ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY,
RNC VARCHAR(11) NOT NULL UNIQUE,
EMAIL_CLIENTE VARCHAR(50) NOT NULL,
NOMBRE_CLIENTE VARCHAR(50) NOT NULL UNIQUE,
ID_ADM INT NOT NULL
);


CREATE VIEW VW_CLIENTES
AS SELECT ID_CLIENTE, NOMBRE_CLIENTE FROM CLIENTES;
/* FIN TABLA CLIENTES*/


CREATE TABLE ADM
(
    ID_ADM INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_ADM TEXT NOT NULL
);


CREATE TABLE USERS_BLOCKEDS
(
ID_BLOCK INT PRIMARY KEY AUTO_INCREMENT,
COOKIE VARCHAR(100) NOT NULL UNIQUE,
IP VARCHAR(100) NOT NULL, 
TIEMPO DOUBLE NOT NULL,
CANTIDAD_BLOCK INT DEFAULT 0,
ESTATUS CHAR(1) NOT NULL DEFAULT 'B' CHECK (ESTATUS IN ('L','B'))
);


CREATE TABLE AUDITORIA
(
ID_MOVIMIENTO INT AUTO_INCREMENT PRIMARY KEY,
ID_USUARIO INT NOT NULL,
MOVIMIENTO VARCHAR(50) NOT NULL,
FECHA VARCHAR(10) NOT NULL,
HORA TIME NOT NULL
);


CREATE VIEW VW_AUDITORIA AS
SELECT A.ID_MOVIMIENTO,CONCAT(U.NOMBRES, ' ' , U.APELLIDOS) AS USUARIO,A.MOVIMIENTO,A.FECHA,A.HORA FROM AUDITORIA AS A
JOIN USUARIOS AS U ON A.ID_USUARIO = U.ID_USUARIO;


CREATE VIEW ALL_USER AS 
SELECT ID_USUARIO AS ID,EMAIL,CONCAT(NOMBRES,' ',APELLIDOS) AS NOMBRE,CCLAVE,IF(ESTATUS = 'T', 'ACTIVO', 'INACTIVO') AS ESTADO
FROM USUARIOS WHERE PRIVILEGIOS = 'EJECUTIVO';


CREATE VIEW ALL_CLTS AS
SELECT C.ID_CLIENTE,C.RNC,C.EMAIL_CLIENTE,C.NOMBRE_CLIENTE,A.NOMBRE_ADM FROM CLIENTES AS C
JOIN ADM AS A ON C.ID_ADM = A.ID_ADM;


CREATE VIEW ALL_USRBLOCK AS
SELECT ID_BLOCK,IP,CONCAT( TIEMPO,' HORAS') AS TIEMPO,CANTIDAD_BLOCK,ESTATUS
FROM USERS_BLOCKEDS WHERE ESTATUS <> 'L';


CREATE TABLE NOTIF_INCONSISTENCIA
(
IDNotificacion INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDEncargado INT NOT NULL,
IDCliente INT NOT NULL,
NONotificacion VARCHAR(30) NOT NULL UNIQUE,
FECHANotif DATE NOT NULL,
TIPONotif VARCHAR(16) NOT NULL CHECK (TIPONotif in ('FISCALIZACION','CONTROL','DEBERES FORMALES')),
MOTIVONotif VARCHAR(10) NOT NULL CHECK (MOTIVONotif in ('IR2','ITBIS','IR3','IR17','ACTIVO','ANTICIPO','IR1')),
FECHAVenci DATE NOT NULL,
CARTANotif LONGTEXT NOT NULL,
Comentarios TEXT,
MIME TEXT
);

/* PROCEDIMIENTOS */*\

DELIMITER $$
CREATE PROCEDURE SP_INSERTAR_USUARIOS
(
    IN in_EMAIL VARCHAR(50),
    IN in_NOMBRES VARCHAR(20),
    IN in_APELLIDOS VARCHAR(20),
    IN in_PRIVILEGIOS VARCHAR(13),
    IN in_TOKEN TEXT
)
BEGIN

IF NOT EXISTS (SELECT * FROM USUARIOS WHERE Email = in_EMAIL) THEN

    INSERT INTO USUARIOS(EMAIL, NOMBRES, APELLIDOS, CLAVE, PRIVILEGIOS,TOKEN)
    VALUES (in_EMAIL, REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRES, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''), REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_APELLIDOS, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''), AES_ENCRYPT('1234', in_EMAIL), in_PRIVILEGIOS,in_TOKEN);

    IF ROW_COUNT() > 0 THEN SELECT 'UIC' AS MENSAJE;
    ELSE SELECT 'EIU' AS MENSAJE; END IF;

ELSE SELECT 'EUE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE `SP_VALIDAR_LOGIN`(
    IN in_EMAIL VARCHAR(50),
    IN in_CLAVE VARCHAR(15)
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE EMAIL = in_EMAIL AND CAST(AES_DECRYPT(CLAVE, in_EMAIL) AS CHAR(50)) = in_CLAVE AND ESTATUS = 'T') THEN
	
    SELECT CASE WHEN CCLAVE = 'T' THEN 1 WHEN CCLAVE = 'F' THEN 2 END AS CCLAVE,ID_USUARIO, NOMBRES, APELLIDOS, PRIVILEGIOS,TOKEN FROM USUARIOS WHERE EMAIL = in_EMAIL;

ELSE SELECT 'ECI' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLAVES_USUARIOS
(
IN in_EMAIL VARCHAR(50),
IN in_CLAVE VARCHAR(15),
IN in_NCLAVE VARCHAR(15)
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE EMAIL = in_EMAIL AND CAST(AES_DECRYPT(CLAVE, in_EMAIL) AS CHAR(50)) = in_CLAVE) THEN

	UPDATE USUARIOS SET CLAVE = AES_ENCRYPT(in_NCLAVE, in_EMAIL), CCLAVE = 'T' WHERE EMAIL = in_EMAIL;
    if row_count() > 0 then	SELECT 'CMC' AS MENSAJE;
    ELSE SELECT 'EMC1' AS MENSAJE; END IF;

ELSE SELECT 'ECI' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_USUARIOS
    (
		IN in_ID INT,
		IN in_TOKEN TEXT,
        IN in_EMAIL VARCHAR(50),
        IN in_NOMBRES VARCHAR(20),
        IN in_APELLIDOS VARCHAR(20),
        IN in_NCLAVE VARCHAR(15)
    )
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_TOKEN and ID_USUARIO = in_ID) THEN

IF NOT EXISTS(select * FROM USUARIOS WHERE EMAIL = in_EMAIL AND ID_USUARIO <> in_ID) THEN
    UPDATE USUARIOS SET
    EMAIL = in_EMAIL,
    NOMBRES = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRES, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''),
    APELLIDOS = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_APELLIDOS, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''),
    CLAVE = AES_ENCRYPT(in_NCLAVE, in_EMAIL) WHERE ID_USUARIO = in_ID;
    
        if row_count() > 0 then
    SELECT 'UMC' AS MENSAJE;
    else select 'EMU' AS MENSAJE; END IF;
    
ELSE SELECT 'EEE' AS MENSAJE; END IF;    

ELSE SELECT 'EMU' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE `SP_VER_DATOS`
(IN in_ID INT, in_VALUE TEXT)
BEGIN

if exists(select * from USUARIOS where CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_VALUE and ID_USUARIO = in_ID) then

select EMAIL, NOMBRES, APELLIDOS, CAST(AES_DECRYPT(CLAVE, EMAIL) AS CHAR(50)) AS CLAVE, PRIVILEGIOS FROM USUARIOS WHERE CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_VALUE and ID_USUARIO = in_ID;

ELSE SELECT 'EELS' AS MENSAJE; END IF;

END $$


CREATE PROCEDURE `SP_ELIMINAR_USUARIO`(
    IN in_ID INT,
    IN in_TOKEN TEXT
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE ID_USUARIO = in_ID AND CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_TOKEN) THEN
	
    UPDATE USUARIOS SET ESTATUS = 'F' WHERE ID_USUARIO = in_ID;
    
    IF ROW_COUNT() > 0 THEN SELECT 'UEC' AS MENSAJE;
    ELSE SELECT 'EEU' AS MENSAJE; END IF;   

ELSE SELECT 'EEU' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_CLIENTES
(
    IN in_RNC VARCHAR(11),
    IN in_EMAIL_CLIENTE VARCHAR(50),
    IN in_NOMBRE_CLIENTE VARCHAR(50),
    IN in_ID_ADM INT
)
BEGIN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC OR EMAIL_CLIENTE = in_EMAIL_CLIENTE OR NOMBRE_CLIENTE = in_NOMBRE_CLIENTE ) THEN

    INSERT INTO CLIENTES(RNC,EMAIL_CLIENTE,NOMBRE_CLIENTE,ID_ADM)
    VALUES (in_RNC,in_EMAIL_CLIENTE,UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE_CLIENTE, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')),in_ID_ADM);

    IF ROW_COUNT() > 0 THEN  SELECT 'CIC' AS MENSAJE;
    ELSE SELECT 'EIC' AS MENSAJE;  END IF;

ELSE SELECT 'ECE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLIENTES
(   
 IN in_ID INT,
 IN in_NAME VARCHAR(50),
 IN in_RNC VARCHAR(11),
 IN in_EMAIL VARCHAR(50),
 IN in_NOMBRE VARCHAR(50),
 IN in_ID_ADM INT
)
BEGIN

DECLARE existing_name_count INT;
DECLARE existing_rnc_count INT;
DECLARE existing_email_count INT;
DECLARE NOMBREC TEXT;

SET NOMBREC = UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u'));

SELECT COUNT(*) INTO existing_name_count 
FROM CLIENTES 
WHERE NOMBRE_CLIENTE = NOMBREC AND ID_CLIENTE != in_ID;

-- Verificar si el nuevo RNC ya existe en otros registros
SELECT COUNT(*) INTO existing_rnc_count 
FROM CLIENTES 
WHERE RNC = in_RNC AND ID_CLIENTE != in_ID;

-- Verificar si el nuevo correo electrónico ya existe en otros registros
SELECT COUNT(*) INTO existing_email_count 
FROM CLIENTES 
WHERE EMAIL_CLIENTE = in_EMAIL AND ID_CLIENTE != in_ID;

IF existing_name_count > 0 THEN
    SELECT 'ECE' AS MENSAJE;
ELSEIF existing_rnc_count > 0 THEN
    SELECT 'ERE' AS MENSAJE;
ELSEIF existing_email_count > 0 THEN
    SELECT 'EEE' AS MENSAJE;
ELSE

    UPDATE CLIENTES 
    SET
    RNC = in_RNC,
    EMAIL_CLIENTE = in_EMAIL,
    NOMBRE_CLIENTE = NOMBREC,
    ID_ADM = in_ID_ADM 
    WHERE ID_CLIENTE = in_ID;

    IF ROW_COUNT() > 0 THEN 
        SELECT 'CMC1' AS MENSAJE;
    ELSE 
        SELECT 'EMC' AS MENSAJE; 
    END IF;
END IF;

END $$


CREATE PROCEDURE SP_ELIMINAR_CLIENTES
(
    IN in_ID VARCHAR(11),
    IN in_NAME TEXT
)
BEGIN

IF EXISTS (SELECT * FROM CLIENTES WHERE ID_CLIENTE = in_ID AND NOMBRE_CLIENTE = in_NAME) THEN
   
    DELETE FROM CLIENTES WHERE ID_CLIENTE = in_ID;
    SELECT 'CEC' AS MENSAJE;
 
ELSE SELECT 'EEC' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_VER_DATOS_CLIENTES
(
IN in_ID_CLIENTE INT,
IN in_NOMBRE_CLIENTE VARCHAR(50)
) BEGIN
IF EXISTS (SELECT * FROM CLIENTES WHERE ID_CLIENTE = in_ID_CLIENTE AND NOMBRE_CLIENTE = in_NOMBRE_CLIENTE) THEN
SELECT C.RNC,C.EMAIL_CLIENTE,C.NOMBRE_CLIENTE,C.ID_ADM,A.NOMBRE_ADM FROM CLIENTES AS C
JOIN ADM AS A ON C.ID_ADM = A.ID_ADM WHERE C.ID_CLIENTE = in_ID_CLIENTE AND C.NOMBRE_CLIENTE = in_NOMBRE_CLIENTE;
ELSE SELECT 'EELC' AS 'MENSAJE';
END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_ADM
(
    IN in_NOMBRE_ADM TEXT
)
BEGIN

DECLARE NOMBRE TEXT;
SET NOMBRE = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE_ADM, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', '');

IF NOT EXISTS (SELECT * FROM ADM WHERE NOMBRE_ADM = NOMBRE ) THEN

    INSERT INTO ADM(NOMBRE_ADM)
    VALUES (NOMBRE);

    IF ROW_COUNT() > 0 THEN  SELECT 'AIC' AS MENSAJE;
    ELSE SELECT 'EIA' AS MENSAJE;  END IF;

ELSE SELECT 'EAE' AS MENSAJE; END IF;

END $$


CREATE PROCEDURE SP_MODIFICAR_ADM
( IN in_ID_ADM INT,
IN in_NOMBRE_ADM TEXT,
IN in_NNOMBRE_ADM TEXT
) BEGIN

IF EXISTS(SELECT * FROM ADM WHERE ID_ADM = in_ID_ADM AND NOMBRE_ADM = in_NOMBRE_ADM) THEN

IF NOT EXISTS(SELECT * FROM ADM WHERE ID_ADM <> in_ID_ADM AND NOMBRE_ADM = in_NNOMBRE_ADM) THEN

UPDATE ADM SET NOMBRE_ADM = in_NNOMBRE_ADM WHERE ID_ADM = in_ID_ADM;

IF ROW_COUNT() > 0 THEN
SELECT 'AMC' AS MENSAJE;
ELSE SELECT 'EMA' AS MENSAJE; END IF;

ELSE SELECT 'EAE' AS MENSAJE; END IF;

ELSE SELECT 'EELC' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_ELIMINAR_ADM
( IN in_ID_ADM INT,
IN in_NOMBRE_ADM TEXT
) BEGIN

IF EXISTS(SELECT * FROM ADM WHERE ID_ADM = in_ID_ADM AND NOMBRE_ADM = in_NOMBRE_ADM) THEN
DELETE FROM ADM WHERE ID_ADM = in_ID_ADM;
IF ROW_COUNT() > 0 THEN
SELECT 'AEC' AS MENSAJE;
ELSE SELECT 'EEA' AS MENSAJE; END IF;

ELSE SELECT 'EELC' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE BLOQUEAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN 

IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN 

INSERT INTO USERS_BLOCKEDS (COOKIE,IP,TIEMPO,CANTIDAD_BLOCK,ESTATUS)
VALUES(IN_COOK,IN_IP,1.25,1,'B');

ELSE UPDATE USERS_BLOCKEDS SET
TIEMPO = CANTIDAD_BLOCK + 1.25,
CANTIDAD_BLOCK = CANTIDAD_BLOCK + 1,
ESTATUS = 'B' 
WHERE COOKIE = IN_COOK AND IP = IN_IP;
END IF; END $$


CREATE PROCEDURE VALIDAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN
IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN
SELECT 'T' AS MENSAJE;

ELSEIF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP AND ESTATUS = 'B') THEN
SELECT 'T' AS MENSAJE;

ELSE SELECT 'F' AS MENSAJE;
END IF; END $$


CREATE EVENT IF NOT EXISTS `EVENT_BLOCKEDS` 
ON SCHEDULE EVERY 15 MINUTE 
DO 
BEGIN
    UPDATE USERS_BLOCKEDS 
    SET TIEMPO = CASE WHEN TIEMPO > 0 THEN TIEMPO - 0.25 ELSE 0 END,
    ESTATUS = CASE WHEN TIEMPO <= 0 THEN 'L' ELSE ESTATUS END
    WHERE TIEMPO > 0;
END$$

DELIMITER $$
CREATE PROCEDURE SP_MOVIMIENTOS
(
IN IN_ID_USUARIO INT,
IN IN_MOVIMIENTO VARCHAR(50)
)
BEGIN
INSERT INTO AUDITORIA(ID_USUARIO,MOVIMIENTO,FECHA,HORA)
VALUES(IN_ID_USUARIO,IN_MOVIMIENTO,DATE_FORMAT(CURRENT_DATE(), '%d-%m-%Y'),CURRENT_TIME());
END $$


CREATE PROCEDURE DESBLOQUEAR_USER
(
IN IN_ID INT
) BEGIN
UPDATE USERS_BLOCKEDS SET TIEMPO = 0, ESTATUS = 'L' WHERE ID_BLOCK = IN_ID;

IF row_count() > 0 THEN
SELECT 'UDC' AS MENSAJE;

ELSE SELECT 'EDU' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_VER_NOTIFICACIONES()
BEGIN
    SELECT 
		N.IDNotificacion AS 'ID',
        CONCAT(U.NOMBRES,' ',U.APELLIDOS) AS 'ENCARGADO',
        C.NOMBRE_CLIENTE AS 'CLIENTE',
        N.FECHANotif AS 'FECHA',
        N.NONotificacion AS 'NOTIFICACION',
        N.TIPONotif AS 'TIPO',
        N.MOTIVONotif AS 'MOTIVO',
        N.FECHAVenci AS 'VENCIMIENTO',
        N.Comentarios AS 'COMENTARIOS'
    FROM 
        NOTIF_INCONSISTENCIA AS N 
        JOIN USUARIOS AS U ON N.IDEncargado = U.ID_USUARIO
        JOIN CLIENTES AS C ON C.ID_CLIENTE = N.IDCliente 
    ORDER BY N.FECHAVenci DESC;
END $$


CREATE PROCEDURE SP_INSERTAR_NOTIF
(
IN IN_IDEncargado INT,
IN IN_IDCliente INT,
IN IN_NONotificacion VARCHAR(30),
IN IN_FECHANotif DATE,
IN IN_TIPONotif VARCHAR(16),
IN IN_MOTIVONotif VARCHAR(10),
IN IN_CARTANotif LONGTEXT,
IN IN_COMENTARIOS TEXT,
IN IN_MIME TEXT
)
BEGIN
    DECLARE PFECHANotif date;
	DECLARE FechaFinal DATE;
	DECLARE DiasLaborables INT DEFAULT 0;

IF NOT EXISTS (SELECT NONotificacion FROM NOTIF_INCONSISTENCIA WHERE NONotificacion = IN_NONotificacion) THEN
	
    SET PFECHANotif = (SELECT IN_FECHANotif);
    SET FechaFinal = DATE_ADD(PFECHANotif, INTERVAL 5 DAY);
	
    WHILE PFECHANotif <= FechaFinal DO
	IF DAYOFWEEK(PFECHANotif) NOT IN (1, 7) THEN
    SET DiasLaborables = DiasLaborables + 1;
    END IF;
    SET PFECHANotif = DATE_ADD(PFECHANotif, INTERVAL 1 DAY);
    END WHILE;
	
	IF DAYOFWEEK(FechaFinal) IN (1, 7) THEN
	SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL -1 DAY);
    END IF;
    
    IF DiasLaborables = 4 THEN
	SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL 1 DAY);
    END IF;
    
	IF DAYOFWEEK(FechaFinal) IN (1, 7) THEN
    SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL 1 DAY);
    END IF;
	
INSERT INTO NOTIF_INCONSISTENCIA(IDEncargado,IDCliente,NONotificacion,FECHANotif,TIPONotif,MOTIVONotif,FECHAVenci,CARTANotif,Comentarios,MIME)
VALUES (IN_IDEncargado,IN_IDCliente,IN_NONotificacion,IN_FECHANotif,IN_TIPONotif,IN_MOTIVONotif,FechaFinal,IN_CARTANotif,IN_COMENTARIOS,IN_MIME);

IF ROW_COUNT() > 0 THEN
SELECT 'NIC' AS MENSAJE;
ELSE SELECT 'EIN' AS MENSAJE;
END IF;

ELSE SELECT 'ENE' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_VER_CARTA
(
IN IN_IDNOT INT
)
BEGIN

IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT) THEN
SELECT CARTANotif AS 'CARTA',MIME FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT;
END IF;
END$$

DELIMITER ;
/*


DELIMITER $$
CREATE PROCEDURE SP_MODIFICAR_NOTIF
(
    IN PNotificacion varchar(30),
    IN PRNCCliente varchar(11),
    IN PNNotificacion varchar(30),
    IN P1FECHANotif DATE,
    IN PTIPONotif varchar(16),
    IN PIncumplimiento varchar(10),
    IN PCARTA TEXT
)
BEGIN
    DECLARE PFECHANotif date;
    DECLARE FechaFinal DATE;
    DECLARE DiasLaborables INT DEFAULT 0;

    SET PFECHANotif = (SELECT P1FECHANotif FROM NOTIF_INCONSISTENCIA WHERE Notificacion = PNotificacion);
    SET FechaFinal = DATE_ADD(PFECHANotif, INTERVAL 5 DAY);

    WHILE PFECHANotif <= FechaFinal DO
        IF DAYOFWEEK(PFECHANotif) NOT IN (1, 7) THEN
            SET DiasLaborables = DiasLaborables + 1;
        END IF;
        SET PFECHANotif = DATE_ADD(PFECHANotif, INTERVAL 1 DAY);
    END WHILE;

    IF DAYOFWEEK(FechaFinal) IN (1, 7) THEN
        SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL -1 DAY);
    END IF;

    IF DiasLaborables = 4 THEN
        SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL 1 DAY);
    END IF;

    IF DAYOFWEEK(FechaFinal) IN (1, 7) THEN
        SET FechaFinal = DATE_ADD(FechaFinal, INTERVAL 1 DAY);
    END IF;
    
UPDATE NOTIF_INCONSISTENCIA
SET
  Notificacion = PNNotificacion,
  RNCCliente = PRNCCliente,
  FECHANotif = P1FECHANotif,
  TIPONotif = PTIPONotif,
  Incumplimiento = PIncumplimiento,
  FECHAVenci = FechaFinal,
  CARTA = PCARTA
WHERE Notificacion = PNotificacion;

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE SP_ELIMINAR_NOTIF
(IN PNotificacion varchar(30))
BEGIN 
DELETE FROM NOTIF_INCONSISTENCIA WHERE Notificacion = PNotificacion;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE SP_CAMBIAR_NOTIF
(
    IN PNotificacion varchar(30),
    IN PESTADONotif varchar(11)
)
BEGIN
    
UPDATE NOTIF_INCONSISTENCIA
SET
  ESTADONotif = PESTADONotif
WHERE Notificacion = PNotificacion;

END $$
DELIMITER ;


DELIMITER //
CREATE EVENT IF NOT EXISTS UpdateNotifStatus
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO BEGIN
UPDATE NOTIF_INCONSISTENCIA
SET ESTADONotif = 'NO APROBADA'
WHERE FECHAVenci < CURRENT_DATE
AND ESTADONotif = 'EN PROCESO';
END //
DELIMITER ;
