DROP DATABASE IF EXISTS PFIDUCIAL;
CREATE DATABASE PFIDUCIAL;
USE PFIDUCIAL;


SET GLOBAL event_scheduler = ON;
SET SQL_SAFE_UPDATES = 0;


/*TABLA USUARIOS*/
CREATE TABLE  USUARIOS
(
ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
EMAIL VARCHAR(50) NOT NULL UNIQUE,
NOMBRES VARCHAR(20) NOT NULL,
APELLIDOS VARCHAR(20) NOT NULL,
CLAVE VARBINARY(100) NOT NULL,
PRIVILEGIOS ENUM('ADMINISTRADOR','EJECUTIVO') NOT NULL,
CCLAVE ENUM('T','F') NOT NULL DEFAULT 'F',
ESTATUS ENUM('T','F') NOT NULL DEFAULT 'T',
TOKEN TEXT NOT NULL
);


insert into USUARIOS(ID_USUARIO,EMAIL,NOMBRES,APELLIDOS,CLAVE,PRIVILEGIOS,CCLAVE,ESTATUS,TOKEN)
VALUES (1,'root@harbest.net','ADMIN','HARBEST',aes_encrypt('24MO410W','root@harbest.net'),'ADMINISTRADOR','T','T','1645538412857');


CREATE VIEW VW_USERS
AS SELECT ID_USUARIO, concat(NOMBRES,' ',APELLIDOS) as NOMBRE FROM USUARIOS where PRIVILEGIOS = 'EJECUTIVO' AND ESTATUS = 'T';


CREATE VIEW ALL_USER AS 
SELECT ID_USUARIO AS ID,EMAIL,CONCAT(NOMBRES,' ',APELLIDOS) AS NOMBRE,CCLAVE,IF(ESTATUS = 'T', 'ACTIVO', 'INACTIVO') AS ESTADO
FROM USUARIOS WHERE PRIVILEGIOS = 'EJECUTIVO';


/*FIN DE TABLA USUARIOS*/


CREATE TABLE ADM
(
 ID_ADM INT AUTO_INCREMENT PRIMARY KEY,
 NOMBRE_ADM VARCHAR(50) NOT NULL UNIQUE,
 DIRECCION_ADM VARCHAR(100) NOT NULL UNIQUE
);


/*TABLA CLIENTES*/
CREATE TABLE CLIENTES
(
ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY,
RNC VARCHAR(11) NOT NULL UNIQUE,
EMAIL_CLIENTE VARCHAR(50) NOT NULL,
NOMBRE_CLIENTE VARCHAR(50) NOT NULL UNIQUE,
ID_ADM INT
);

ALTER TABLE CLIENTES ADD CONSTRAINT FK_IDADM_IDADM
FOREIGN KEY (ID_ADM) REFERENCES ADM(ID_ADM) 
ON DELETE SET NULL;


CREATE VIEW VW_CLIENTES
AS SELECT ID_CLIENTE, NOMBRE_CLIENTE FROM CLIENTES;
/* FIN TABLA CLIENTES*/

CREATE TABLE USERS_BLOCKEDS
(
ID_BLOCK INT PRIMARY KEY AUTO_INCREMENT,
COOKIE VARCHAR(100) NOT NULL UNIQUE,
IP VARCHAR(100) NOT NULL, 
TIEMPO DOUBLE NOT NULL,
CANTIDAD_BLOCK INT DEFAULT 0,
ESTATUS ENUM('L','B') NOT NULL DEFAULT 'B'
);


CREATE TABLE AUDITORIA
(
ID_MOVIMIENTO INT AUTO_INCREMENT PRIMARY KEY,
ID_USUARIO INT NOT NULL,
MOVIMIENTO VARCHAR(50) NOT NULL,
FECHA VARCHAR(10) NOT NULL,
HORA TIME NOT NULL
);


ALTER TABLE AUDITORIA ADD CONSTRAINT FK_IDUSUARIO_IDUSR
FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
ON UPDATE CASCADE
ON DELETE RESTRICT;


CREATE VIEW VW_AUDITORIA AS
SELECT A.ID_MOVIMIENTO,CONCAT(U.NOMBRES, ' ' , U.APELLIDOS) AS USUARIO,A.MOVIMIENTO,A.FECHA,A.HORA FROM AUDITORIA AS A
JOIN USUARIOS AS U ON A.ID_USUARIO = U.ID_USUARIO ORDER BY A.ID_MOVIMIENTO DESC;


CREATE VIEW ALL_CLTS AS
SELECT C.ID_CLIENTE,C.RNC,C.EMAIL_CLIENTE,C.NOMBRE_CLIENTE,A.NOMBRE_ADM AS ADMINISTRACION FROM CLIENTES AS C
JOIN ADM AS A ON C.ID_ADM = A.ID_ADM;


CREATE VIEW ALL_USRBLOCK AS
SELECT ID_BLOCK,IP,CONCAT( TIEMPO,' HORAS') AS TIEMPO,CANTIDAD_BLOCK,ESTATUS
FROM USERS_BLOCKEDS WHERE ESTATUS <> 'L';


CREATE TABLE NOTIF_INCONSISTENCIA
(
IDNotificacion INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDEncargado INT NOT NULL,
IDCliente INT NOT NULL,
NONotificacion VARCHAR(100) NOT NULL UNIQUE,
FECHANotif DATE NOT NULL,
TIPONotif ENUM('FISCALIZACION','CONTROL','DEBERES FORMALES') NOT NULL,
MOTIVONotif VARCHAR(20) NOT NULL,
FECHAVenci DATE NOT NULL,
CARTANotif LONGTEXT NOT NULL,
Aincumplimiento VARCHAR(20) NOT NULL,
Comentario TEXT,
MIME TEXT
);

ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT
FK_IDENCARGADO_IDUSR FOREIGN KEY (IDEncargado)
REFERENCES USUARIOS (ID_USUARIO) 
ON DELETE CASCADE;


ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT FK_IDCLIENTE_IDCLT
FOREIGN KEY (IDCliente) REFERENCES CLIENTES(ID_CLIENTE)
ON DELETE CASCADE;

CREATE TABLE EMAILS_NOTIF
(
ID_ENOTIF INT PRIMARY KEY AUTO_INCREMENT,
ID_NOTIF INT UNIQUE NOT NULL,
HORA_REGISTRO DATETIME NOT NULL,
HORA_ENVIO DATETIME NOT NULL,
ESTATUS ENUM('T','F') DEFAULT 'F'
);


ALTER TABLE EMAILS_NOTIF ADD CONSTRAINT FK_IDNOT_IDNOTIF
FOREIGN KEY (ID_NOTIF) REFERENCES NOTIF_INCONSISTENCIA(IDNotificacion)
ON DELETE CASCADE;


CREATE VIEW READ_EMAIL_NOTIF AS 
SELECT E.ID_ENOTIF AS ID,N.NONotificacion AS 'NOTIF. INCONSISTENCIA',CONCAT(U.NOMBRES," ",U.APELLIDOS) AS ENCARGADO, C.NOMBRE_CLIENTE, DATE_FORMAT(E.HORA_REGISTRO, "%h:%i:%s %p") AS HORA_REGISTRO,DATE_FORMAT(E.HORA_ENVIO, "%h:%i:%s %p") AS HORA_ENVIO,IF(E.ESTATUS = 'T','CORREO ENVIADO', 'EN ESPERA') AS "ESTADO" 
FROM EMAILS_NOTIF AS E 
JOIN NOTIF_INCONSISTENCIA AS N ON E.ID_NOTIF = N.IDNotificacion
JOIN CLIENTES AS C ON C.ID_CLIENTE = N.IDCliente
JOIN USUARIOS AS U ON N.IDEncargado = U.ID_USUARIO
ORDER BY CASE E.ESTATUS WHEN 'F' THEN 1 ELSE 2 END;


CREATE VIEW VW_VER_NOTIFICACIONES
AS
    SELECT 
		N.IDNotificacion AS 'ID',
        C.NOMBRE_CLIENTE AS 'CLIENTE',
        C.EMAIL_CLIENTE AS 'EMAIL CLIENTE',
        date_format(N.FECHANotif, '%d/%m/%Y') AS 'FECHA',
        N.NONotificacion AS 'NOTIFICACION',
        N.TIPONotif AS 'TIPO',
        N.MOTIVONotif AS 'MOTIVO',
        N.Aincumplimiento AS 'AÑO',
        date_format(N.FECHAVenci, '%d/%m/%Y') AS 'VENCIMIENTO',
        N.Comentario AS 'COMENTARIO'
    FROM 
        NOTIF_INCONSISTENCIA AS N 
        JOIN USUARIOS AS U ON N.IDEncargado = U.ID_USUARIO
        JOIN CLIENTES AS C ON C.ID_CLIENTE = N.IDCliente 
ORDER BY N.FECHAVenci DESC;


CREATE VIEW ALL_NOTIF AS
select IDNotificacion,NONotificacion from notif_inconsistencia as n 
left join EMAILS_NOTIF as e on n.IDNotificacion = e.ID_NOTIF
where e.ESTATUS = 'F';


CREATE TABLE DETALLE_CITACION (
  ID_DETALLE int NOT NULL AUTO_INCREMENT PRIMARY KEY,
  ID_NOTIFICACION int NOT NULL UNIQUE,
  NO_CASO int NOT NULL UNIQUE,
  INCONSISTENCIA json NOT NULL,
  FECHA date NOT NULL,
  FECHAVenci date NOT NULL,
  DETALLES_CITACION json NOT NULL
);

ALTER TABLE DETALLE_CITACION ADD CONSTRAINT FK_IDNOT_IDNoti 
FOREIGN KEY (`ID_NOTIFICACION`) REFERENCES NOTIF_INCONSISTENCIA (`IDNotificacion`);

CREATE VIEW ALL_DETALLES AS
SELECT D.ID_DETALLE,D.NO_CASO FROM DETALLE_CITACION AS D
LEFT JOIN EMAILS_DDC AS E ON D.ID_DETALLE = E.ID_DDC
WHERE E.ESTATUS = 'F';

CREATE VIEW ALL_NOTIF_FOR_DETALLE AS
select IDNotificacion,NONotificacion from notif_inconsistencia as n 
left join EMAILS_NOTIF as e on n.IDNotificacion = e.ID_NOTIF
left join DETALLE_CITACION as d on n.IDNotificacion = d.ID_NOTIFICACION
where e.ESTATUS = 'T' and d.ID_NOTIFICACION IS NULL;

CREATE VIEW VW_VER_DDC AS
SELECT D.ID_DETALLE AS ID,C.NOMBRE_CLIENTE AS CLIENTE,C.EMAIL_CLIENTE AS 'EMAIL CLIENTE',D.FECHA,N.NONotificacion AS NOTIFICACION,D.NO_CASO AS "NO. CASO",N.TIPONotif AS TIPO,D.FECHAVenci AS "FECHA VENCIMIENTO",N.Comentario
FROM DETALLE_CITACION AS D
JOIN NOTIF_INCONSISTENCIA AS N ON N.IDNotificacion = D.ID_NOTIFICACION
JOIN CLIENTES AS C ON C.ID_CLIENTE = N.IDCliente;


CREATE TABLE EMAILS_DDC (
ID_EDDC int NOT NULL AUTO_INCREMENT PRIMARY KEY,
ID_DDC int NOT NULL UNIQUE,
HORA_REGISTRO datetime NOT NULL,
HORA_ENVIO datetime NOT NULL,
ESTATUS enum('T','F') DEFAULT 'F'
);

ALTER TABLE EMAILS_DDC ADD CONSTRAINT `FK_IDDDC_IDDDC` FOREIGN KEY (`ID_DDC`) 
REFERENCES DETALLE_CITACION (`ID_DETALLE`) ON DELETE CASCADE;


CREATE VIEW READ_EMAIL_DDC AS 
SELECT E.ID_EDDC AS ID,N.NONotificacion AS 'NOTIF. INCONSISTENCIA',D.NO_CASO AS 'NUMERO DE CASO', C.NOMBRE_CLIENTE, DATE_FORMAT(E.HORA_REGISTRO, "%h:%i:%s %p") AS HORA_REGISTRO,DATE_FORMAT(E.HORA_ENVIO, "%h:%i:%s %p") AS HORA_ENVIO,IF(E.ESTATUS = 'T','CORREO ENVIADO', 'EN ESPERA') AS "ESTADO" 
FROM EMAILS_DDC AS E
JOIN DETALLE_CITACION AS D ON D.ID_DETALLE = ID_DDC
JOIN NOTIF_INCONSISTENCIA AS N ON D.ID_NOTIFICACION = N.IDNotificacion
JOIN CLIENTES AS C ON C.ID_CLIENTE = N.IDCliente
ORDER BY CASE E.ESTATUS WHEN 'F' THEN 1 ELSE 2 END;

/* PROCEDIMIENTOS */*\
DELIMITER $$
CREATE PROCEDURE SP_INSERTAR_USUARIOS
(
    IN in_EMAIL VARCHAR(50),
    IN in_NOMBRES VARCHAR(20),
    IN in_APELLIDOS VARCHAR(20),
    IN in_PRIVILEGIOS VARCHAR(13),
    IN in_TOKEN TEXT
)
BEGIN

IF NOT EXISTS (SELECT * FROM USUARIOS WHERE Email = in_EMAIL) THEN

 INSERT INTO USUARIOS(EMAIL, NOMBRES, APELLIDOS, CLAVE, PRIVILEGIOS,TOKEN)
 VALUES (in_EMAIL, REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRES, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''), REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_APELLIDOS, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''), AES_ENCRYPT('1234', in_EMAIL), in_PRIVILEGIOS,in_TOKEN);

 IF ROW_COUNT() > 0 THEN SELECT 'UIC' AS MENSAJE;
 ELSE SELECT 'EIU' AS MENSAJE; END IF;

ELSE SELECT 'EUE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE `SP_VALIDAR_LOGIN`(
    IN in_EMAIL VARCHAR(50),
    IN in_CLAVE VARCHAR(15)
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE EMAIL = in_EMAIL AND CAST(AES_DECRYPT(CLAVE, in_EMAIL) AS CHAR(50)) = in_CLAVE AND ESTATUS = 'T') THEN
	
    SELECT CASE WHEN CCLAVE = 'T' THEN 1 WHEN CCLAVE = 'F' THEN 2 END AS CCLAVE,ID_USUARIO, NOMBRES, APELLIDOS, PRIVILEGIOS,TOKEN FROM USUARIOS WHERE EMAIL = in_EMAIL;

ELSE SELECT 'ECI' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLAVES_USUARIOS
(
IN in_EMAIL VARCHAR(50),
IN in_CLAVE VARCHAR(15),
IN in_NCLAVE VARCHAR(15)
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE EMAIL = in_EMAIL AND CAST(AES_DECRYPT(CLAVE, in_EMAIL) AS CHAR(50)) = in_CLAVE) THEN

	UPDATE USUARIOS SET CLAVE = AES_ENCRYPT(in_NCLAVE, in_EMAIL), CCLAVE = 'T' WHERE EMAIL = in_EMAIL;
    if row_count() > 0 then	SELECT 'CMC' AS MENSAJE;
    ELSE SELECT 'EMC1' AS MENSAJE; END IF;

ELSE SELECT 'ECI' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_USUARIOS
    (
	  IN in_ID INT,
	  IN in_TOKEN TEXT,
      IN in_EMAIL VARCHAR(50),
      IN in_NOMBRES VARCHAR(20),
      IN in_APELLIDOS VARCHAR(20),
      IN in_NCLAVE VARCHAR(15)
    )
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_TOKEN and ID_USUARIO = in_ID) THEN

IF NOT EXISTS(select * FROM USUARIOS WHERE EMAIL = in_EMAIL AND ID_USUARIO <> in_ID) THEN
    UPDATE USUARIOS SET
    EMAIL = in_EMAIL,
    NOMBRES = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRES, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''),
    APELLIDOS = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_APELLIDOS, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', ''),
    CLAVE = AES_ENCRYPT(in_NCLAVE, in_EMAIL) WHERE ID_USUARIO = in_ID;
    
    if row_count() > 0 then
    SELECT 'UMC' AS MENSAJE;
    else select 'EMU' AS MENSAJE; END IF;
    
ELSE SELECT 'EEE' AS MENSAJE; END IF;    

ELSE SELECT 'EMU' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE `SP_VER_DATOS`
(IN in_ID INT, in_VALUE TEXT)
BEGIN

if exists(select * from USUARIOS where CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_VALUE and ID_USUARIO = in_ID) then

select EMAIL, NOMBRES, APELLIDOS, CAST(AES_DECRYPT(CLAVE, EMAIL) AS CHAR(50)) AS CLAVE, PRIVILEGIOS FROM USUARIOS WHERE CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_VALUE and ID_USUARIO = in_ID;

ELSE SELECT 'EELS' AS MENSAJE; END IF;

END $$


CREATE PROCEDURE `SP_ELIMINAR_USUARIO`(
    IN in_ID INT,
    IN in_TOKEN TEXT
) BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE ID_USUARIO = in_ID AND CONCAT(NOMBRES, ' ' ,APELLIDOS) = in_TOKEN) THEN
	
    UPDATE USUARIOS SET ESTATUS = 'F' WHERE ID_USUARIO = in_ID;
    
    IF ROW_COUNT() > 0 THEN SELECT 'UEC' AS MENSAJE;
    ELSE SELECT 'EEU' AS MENSAJE; END IF;   

ELSE SELECT 'EEU' AS MENSAJE; END IF;
END $$

CREATE PROCEDURE SP_INSERTAR_CLIENTES
(
    IN in_RNC VARCHAR(11),
    IN in_EMAIL_CLIENTE VARCHAR(50),
    IN in_NOMBRE_CLIENTE VARCHAR(50),
    IN in_ID_ADM INT
)
BEGIN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC OR EMAIL_CLIENTE = in_EMAIL_CLIENTE OR NOMBRE_CLIENTE = in_NOMBRE_CLIENTE ) THEN

    INSERT INTO CLIENTES(RNC,EMAIL_CLIENTE,NOMBRE_CLIENTE,ID_ADM)
    VALUES (in_RNC,in_EMAIL_CLIENTE,UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE_CLIENTE, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')),in_ID_ADM);

    IF ROW_COUNT() > 0 THEN  SELECT 'CIC' AS MENSAJE;
    ELSE SELECT 'EIC' AS MENSAJE;  END IF;

ELSE SELECT 'ECE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLIENTES
(   
 IN in_ID INT,
 IN in_NAME VARCHAR(50),
 IN in_RNC VARCHAR(11),
 IN in_EMAIL VARCHAR(50),
 IN in_NOMBRE VARCHAR(50),
 IN in_ID_ADM INT
)
BEGIN

DECLARE NOMBREC TEXT;

SET NOMBREC = UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u'));

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE NOMBRE_CLIENTE = NOMBREC AND ID_CLIENTE != in_ID) THEN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC AND ID_CLIENTE != in_ID) THEN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE EMAIL_CLIENTE = in_EMAIL AND ID_CLIENTE != in_ID) THEN

UPDATE CLIENTES 
    SET
    RNC = in_RNC,
    EMAIL_CLIENTE = in_EMAIL,
    NOMBRE_CLIENTE = NOMBREC,
    ID_ADM = in_ID_ADM 
    WHERE ID_CLIENTE = in_ID;

    IF ROW_COUNT() > 0 THEN SELECT 'CMC1' AS MENSAJE;
    ELSE SELECT 'EMC' AS MENSAJE; 
	END IF;

ELSE SELECT 'EEE' AS MENSAJE; END IF;

ELSE SELECT 'ERE' AS MENSAJE; END IF;

ELSE SELECT 'ECE' AS MENSAJE; END IF;

END $$


CREATE PROCEDURE SP_VER_DATOS_CLIENTES
(
IN in_ID_CLIENTE INT,
IN in_NOMBRE_CLIENTE VARCHAR(50)
) BEGIN
IF EXISTS (SELECT * FROM CLIENTES WHERE ID_CLIENTE = in_ID_CLIENTE AND NOMBRE_CLIENTE = in_NOMBRE_CLIENTE) THEN
SELECT C.RNC,C.EMAIL_CLIENTE,C.NOMBRE_CLIENTE,C.ID_ADM,A.NOMBRE_ADM FROM CLIENTES AS C
JOIN ADM AS A ON C.ID_ADM = A.ID_ADM WHERE C.ID_CLIENTE = in_ID_CLIENTE AND C.NOMBRE_CLIENTE = in_NOMBRE_CLIENTE;
ELSE SELECT 'EELC' AS 'MENSAJE';
END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_ADM
(IN in_NOMBRE_ADM VARCHAR(50), IN in_DIRECC VARCHAR(100))
BEGIN

DECLARE NOMBRE TEXT;
SET NOMBRE = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(in_NOMBRE_ADM, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z ]', '');

IF NOT EXISTS (SELECT * FROM ADM WHERE NOMBRE_ADM = NOMBRE OR DIRECCION_ADM = in_DIRECC) THEN

    INSERT INTO ADM(NOMBRE_ADM,DIRECCION_ADM)
    VALUES (NOMBRE,in_DIRECC);

    IF ROW_COUNT() > 0 THEN  SELECT 'AIC' AS MENSAJE;
    ELSE SELECT 'EIA' AS MENSAJE;  END IF;

ELSE SELECT 'EAE' AS MENSAJE; 
END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_ADM
( IN in_ID_ADM INT,
IN in_NOMBRE_ADM VARCHAR(50),
IN in_NNOMBRE_ADM VARCHAR(50),
IN in_NDIRECCION_ADM VARCHAR(100)
) BEGIN

IF EXISTS(SELECT * FROM ADM WHERE ID_ADM = in_ID_ADM AND NOMBRE_ADM = in_NOMBRE_ADM) THEN

IF NOT EXISTS(SELECT * FROM ADM WHERE ID_ADM <> in_ID_ADM AND NOMBRE_ADM = in_NNOMBRE_ADM AND DIRECCION_ADM = in_NDIRECCION_ADM) THEN

UPDATE ADM SET NOMBRE_ADM = in_NNOMBRE_ADM, DIRECCION_ADM = in_NDIRECCION_ADM WHERE ID_ADM = in_ID_ADM;

IF ROW_COUNT() > 0 THEN
SELECT 'AMC' AS MENSAJE;
ELSE SELECT 'EMA' AS MENSAJE; END IF;

ELSE SELECT 'EAE' AS MENSAJE; END IF;

ELSE SELECT 'EELC' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE BLOQUEAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN 

IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN 

INSERT INTO USERS_BLOCKEDS (COOKIE,IP,TIEMPO,CANTIDAD_BLOCK,ESTATUS)
VALUES(IN_COOK,IN_IP,1.25,1,'B');

ELSE UPDATE USERS_BLOCKEDS SET
TIEMPO = CANTIDAD_BLOCK + 1.25,
CANTIDAD_BLOCK = CANTIDAD_BLOCK + 1,
ESTATUS = 'B' 
WHERE COOKIE = IN_COOK AND IP = IN_IP;
END IF; END $$


CREATE PROCEDURE VALIDAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN
IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN
SELECT 'T' AS MENSAJE;

ELSEIF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP AND ESTATUS = 'B') THEN
SELECT 'T' AS MENSAJE;

ELSE SELECT 'F' AS MENSAJE;
END IF; END $$


CREATE EVENT IF NOT EXISTS `EVENT_BLOCKEDS` 
ON SCHEDULE EVERY 15 MINUTE 
DO 
BEGIN
    UPDATE USERS_BLOCKEDS 
    SET TIEMPO = CASE WHEN TIEMPO > 0 THEN TIEMPO - 0.25 ELSE 0 END,
    ESTATUS = CASE WHEN TIEMPO <= 0 THEN 'L' ELSE ESTATUS END
    WHERE TIEMPO > 0;
END$$

DELIMITER $$
CREATE PROCEDURE SP_MOVIMIENTOS
(
IN IN_ID_USUARIO INT,
IN IN_MOVIMIENTO VARCHAR(50)
)
BEGIN
INSERT INTO AUDITORIA(ID_USUARIO,MOVIMIENTO,FECHA,HORA)
VALUES(IN_ID_USUARIO,IN_MOVIMIENTO,DATE_FORMAT(CURRENT_DATE(), '%d-%m-%Y'),CURRENT_TIME());
END $$


CREATE PROCEDURE DESBLOQUEAR_USER
(
IN IN_ID INT
) BEGIN
UPDATE USERS_BLOCKEDS SET TIEMPO = 0, ESTATUS = 'L' WHERE ID_BLOCK = IN_ID;

IF row_count() > 0 THEN
SELECT 'UDC' AS MENSAJE;

ELSE SELECT 'EDU' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_NOTIF
(
IN IN_IDEncargado INT,
IN IN_IDCliente INT,
IN IN_NONotificacion VARCHAR(100),
IN IN_FECHANotif DATE,
IN IN_TIPONotif VARCHAR(16),
IN IN_MOTIVONotif VARCHAR(20),
IN IN_CARTANotif LONGTEXT,
IN IN_Aincumplimiento VARCHAR(20),
IN IN_Comentario TEXT,
IN IN_MIME TEXT
)
BEGIN

  DECLARE FechaFinal DATE;
    
  SELECT DIASLABORABLES(IN_FECHANotif,5) INTO FechaFinal;

IF NOT EXISTS (SELECT NONotificacion FROM NOTIF_INCONSISTENCIA WHERE NONotificacion = IN_NONotificacion) THEN
	
INSERT INTO NOTIF_INCONSISTENCIA(IDEncargado,IDCliente,NONotificacion,FECHANotif,TIPONotif,MOTIVONotif,FECHAVenci,CARTANotif,Aincumplimiento,Comentario,MIME)
VALUES (IN_IDEncargado,IN_IDCliente,IN_NONotificacion,IN_FECHANotif,IN_TIPONotif,IN_MOTIVONotif,FechaFinal,IN_CARTANotif,IN_Aincumplimiento,IN_Comentario,IN_MIME);

IF ROW_COUNT() > 0 THEN
SELECT 'NIC' AS MENSAJE;
ELSE SELECT 'EIN' AS MENSAJE;
END IF;

ELSE SELECT 'ENE' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_VER_CARTA
(
IN IN_IDNOT INT
)
BEGIN

IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT) THEN
SELECT CARTANotif AS 'CARTA',MIME FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT;
END IF;
END$$



CREATE PROCEDURE SP_INSERT_EMAIL_NOTIF
(
IN IN_NON VARCHAR(30)
) BEGIN

DECLARE IN_IDN INT;

SELECT IDNotificacion FROM NOTIF_INCONSISTENCIA WHERE NONotificacion = IN_NON INTO IN_IDN;

IF NOT EXISTS (SELECT * FROM EMAILS_NOTIF WHERE ID_NOTIF = IN_IDN) THEN
INSERT INTO EMAILS_NOTIF(ID_NOTIF,HORA_REGISTRO,HORA_ENVIO) VALUES(IN_IDN,now(),DATE_ADD(now(), INTERVAL 5 HOUR));
ELSE SELECT 'EELS' AS 'MENSAJE'; END IF;
END $$


CREATE PROCEDURE SENDMAIL_NOTIF(IN SEARCH INT) BEGIN
SELECT E.ID_NOTIF,C.EMAIL_CLIENTE AS EMCLT,C.NOMBRE_CLIENTE AS NOCLT,N.NONotificacion AS NONOTIF,N.MOTIVONotif AS NOIMPU,N.Aincumplimiento AS AIMPU, N.CARTANotif AS CARTA, N.MIME
FROM EMAILS_NOTIF AS E
JOIN NOTIF_INCONSISTENCIA AS N ON E.ID_NOTIF = N.IDNotificacion
JOIN CLIENTES AS C ON N.IDCliente = C.ID_CLIENTE
WHERE E.ESTATUS = "F" AND ID_ENOTIF = SEARCH;
END $$


CREATE PROCEDURE VER_DATOS_NOTIF
(IN in_ID INT, IN in_NON VARCHAR(30))
BEGIN
IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = in_ID AND NONotificacion = in_NON) THEN
SELECT N.IDCliente,C.NOMBRE_CLIENTE,N.FECHANotif,N.NONotificacion,N.TIPONotif,N.MOTIVONotif,N.Aincumplimiento FROM NOTIF_INCONSISTENCIA AS N
JOIN CLIENTES AS C ON N.IDCliente = C.ID_CLIENTE WHERE IDNotificacion = in_ID AND NONotificacion = in_NON;
ELSE SELECT 'EELS' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_ELIMINAR_NOTIF
(IN IN_IDN INT, IN IN_NONO VARCHAR(100))
BEGIN
IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDN AND NONotificacion = IN_NONO) THEN
DELETE FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDN AND NONotificacion = IN_NONO;

IF ROW_COUNT() > 0 THEN
SELECT 'NEC' AS MENSAJE;
ELSE SELECT 'EEN' AS MENSAJE;
END IF;

ELSE SELECT 'EELS' AS MENSAJE;
END IF;
END$$


CREATE FUNCTION DIASLABORABLES(FI DATE, DL INT)
RETURNS DATE
DETERMINISTIC
BEGIN
    DECLARE DL1 INT DEFAULT 0;
    DECLARE FF DATE;

    SET FF = FI;

    WHILE DL1 < DL DO
        SET FF = FF + INTERVAL 1 DAY;
        
        IF DAYOFWEEK(FF) NOT IN (1, 7) THEN
            SET DL1 = DL1 + 1;
        END IF;
    END WHILE;

    RETURN FF;
END $$


CREATE PROCEDURE SP_MODIFICAR_NOTIF(
    IN in_IDN int,
    IN in_Not varchar(100),
    IN in_IDC int,
    IN in_fec DATE,
    IN in_NNot varchar(100),
    IN in_tipon varchar(16),
    IN in_MOT VARCHAR(20),
    IN in_AIN VARCHAR(20)
)
BEGIN
	DECLARE FechaFinal DATE;
    
IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = in_IDN AND NONotificacion = in_Not) then

IF NOT EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion <> in_IDN AND NONotificacion = in_NNot) then

    SELECT DIASLABORABLES(in_fec,5) INTO FechaFinal;
    
    UPDATE NOTIF_INCONSISTENCIA SET
    IDCliente = in_IDC,
    NONotificacion = in_NNot,
    FECHANotif = in_fec,
    TIPONotif = in_tipon,
    MOTIVONotif = in_MOT,
    FECHAVenci = FechaFinal,
    Aincumplimiento = in_AIN where IDNotificacion = in_IDN AND NONotificacion = in_Not;
    
    IF ROW_COUNT() > 0 THEN
    SELECT 'NMC' AS MENSAJE;
    ELSE SELECT 'EELS' AS MENSAJE;
    END IF;
    

ELSE SELECT 'ENE' AS MENSAJE;
end if;

ELSE SELECT 'EELS' AS MENSAJE;
end if;

END $$


CREATE PROCEDURE SP_INSERTAR_DETALLE
(
IN INIDNOT INT,
IN INNOCAS INT,
IN ININCON JSON,
IN INFECHA DATE,
IN INDETALL JSON
) BEGIN

DECLARE INFECVEN DATE;

SELECT DIASLABORABLES(INFECHA,20) INTO INFECVEN;

IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = INIDNOT) THEN

IF NOT EXISTS (SELECT * FROM DETALLE_CITACION WHERE NO_CASO = INNOCAS OR ID_NOTIFICACION = INIDNOT ) THEN

INSERT INTO DETALLE_CITACION(ID_NOTIFICACION,NO_CASO,INCONSISTENCIA,FECHA,FECHAVenci,DETALLES_CITACION) VALUES(INIDNOT,INNOCAS,ININCON,INFECHA,INFECVEN,INDETALL);

IF ROW_COUNT() > 0 THEN
SELECT 'DIC' AS MENSAJE;
ELSE SELECT 'EID' AS MENSAJE; END IF;

ELSE SELECT 'EDCE' AS MENSAJE; END IF;

ELSE SELECT 'EELS' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_DELETE_DDC
(IN IN_IDD INT,IN IN_NOC INT) BEGIN

IF EXISTS(SELECT * FROM DETALLE_CITACION WHERE ID_DETALLE = IN_IDD AND NO_CASO = IN_NOC) THEN
	
    DELETE FROM DETALLE_CITACION WHERE ID_DETALLE = IN_IDD;
    
    IF ROW_COUNT() > 0 THEN SELECT 'DEC' AS MENSAJE;
    ELSE SELECT 'EED' AS MENSAJE; END IF;   

ELSE SELECT 'EELS' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_INSERT_EMAIL_DDC
(
IN IN_NOCAS VARCHAR(30)
) BEGIN

DECLARE IN_IDD INT;

SELECT ID_DETALLE FROM DETALLE_CITACION WHERE NO_CASO = IN_NOCAS INTO IN_IDD;

IF NOT EXISTS (SELECT * FROM emails_ddc WHERE ID_DDC = IN_IDD) THEN
INSERT INTO EMAILS_DDC(ID_DDC,HORA_REGISTRO,HORA_ENVIO) VALUES(IN_IDD,now(),DATE_ADD(now(), INTERVAL 5 HOUR));
ELSE SELECT 'EELS' AS 'MENSAJE'; END IF;
END $$


CREATE PROCEDURE SENDMAIL_DDC(IN SEARCH INT) BEGIN
SELECT E.ID_DDC,C.NOMBRE_CLIENTE,C.EMAIL_CLIENTE,N.NONotificacion AS NOTIFICACION,D.INCONSISTENCIA AS INCONSISTENCIAS,D.FECHAVenci,D.DETALLES_CITACION AS ARCHIVOS
FROM EMAILS_DDC AS E
JOIN DETALLE_CITACION AS D ON E.ID_DDC = D.ID_DETALLE
JOIN NOTIF_INCONSISTENCIA AS N ON D.ID_NOTIFICACION = N.IDNotificacion
JOIN CLIENTES AS C ON N.IDCliente = C.ID_CLIENTE
WHERE E.ESTATUS = "F" AND E.ID_EDDC = SEARCH;
END $$

DELIMITER ;