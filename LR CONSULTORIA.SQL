DROP DATABASE IF EXISTS PFIDUCIAL;
CREATE DATABASE PFIDUCIAL;
USE PFIDUCIAL;


SET GLOBAL event_scheduler = ON;
SET SQL_SAFE_UPDATES = 0;


/*TABLA USUARIOS*/
CREATE TABLE USUARIOS
(
IDUsuario INT AUTO_INCREMENT PRIMARY KEY,
Email VARCHAR(50) NOT NULL UNIQUE,
Nombres VARCHAR(20) NOT NULL,
Apellidos VARCHAR(20) NOT NULL,
Clave VARBINARY(100) NOT NULL,
Privilegios ENUM('ADMINISTRADOR','CASOS FISCALES') NOT NULL,
CClave ENUM('T','F') NOT NULL DEFAULT 'F',
Estatus ENUM('T','F') NOT NULL DEFAULT 'T',
Token TEXT NOT NULL
);


insert into USUARIOS(IDUsuario,Email,Nombres,Apellidos,Clave,Privilegios,CClave,Estatus,Token)
VALUES (1,'root@harbest.net','ADMIN','HARBEST',aes_encrypt('24MO410W','root@harbest.net'),'ADMINISTRADOR','T','T','1645538412857');


CREATE VIEW VW_USERS AS 
SELECT IDUsuario,CONCAT(Nombres,' ',Apellidos) as NOMBRE 
FROM USUARIOS where Privilegios = 'CASOS FISCALES' AND Estatus = 'T';


CREATE VIEW ALL_USER AS
SELECT IDUsuario AS ID,Email,CONCAT(Nombres,' ',Apellidos) AS NOMBRE,CClave,IF(Estatus = 'T', 'ACTIVO', 'INACTIVO') AS ESTADO
FROM USUARIOS WHERE Privilegios = 'CASOS FISCALES';

/*FIN DE TABLA USUARIOS*/


CREATE TABLE ADM
(
 IDADM INT AUTO_INCREMENT PRIMARY KEY,
 NombreADM VARCHAR(50) NOT NULL UNIQUE,
 DireccionADM VARCHAR(100) NOT NULL UNIQUE
);


/*TABLA CLIENTES*/
CREATE TABLE CLIENTES
(
IDCliente INT AUTO_INCREMENT PRIMARY KEY,
RNC VARCHAR(11) NOT NULL UNIQUE,
EmailCliente VARCHAR(100) NOT NULL,
NombreCliente VARCHAR(100) NOT NULL UNIQUE,
IDADM INT DEFAULT 1 NOT NULL,
CC JSON
);

ALTER TABLE CLIENTES ADD CONSTRAINT FK_CLIENTES_ADM
FOREIGN KEY (IDADM) REFERENCES ADM(IDADM);


CREATE VIEW VW_CLIENTES
AS SELECT IDCliente, upper(NombreCliente) AS NombreCliente FROM CLIENTES;


CREATE VIEW VW_ADM AS
SELECT A.IDADM AS ID, A.NombreADM AS ADMINISTRACION, A.DireccionADM AS DIRECCION,count(C.IDADM) AS CLIENTES FROM ADM AS A
LEFT JOIN CLIENTES AS C ON A.IDADM = C.IDADM GROUP BY A.IDADM;
/* FIN TABLA CLIENTES*/


CREATE TABLE USERS_BLOCKEDS
(
IDBlock INT PRIMARY KEY AUTO_INCREMENT,
Cookie VARCHAR(100) NOT NULL UNIQUE,
IP VARCHAR(100) NOT NULL, 
Tiempo DOUBLE NOT NULL,
CantidadBlock INT DEFAULT 0,
Estatus ENUM('L','B') NOT NULL DEFAULT 'B'
);


CREATE TABLE AUDITORIA
(
IDMovimiento INT AUTO_INCREMENT PRIMARY KEY,
IDUsuario INT NOT NULL,
Movimiento VARCHAR(50) NOT NULL,
Fecha VARCHAR(10) NOT NULL,
Hora TIME NOT NULL
);


ALTER TABLE AUDITORIA ADD CONSTRAINT FK_AUDITORIA_USUARIOS
FOREIGN KEY (IDUsuario) REFERENCES USUARIOS(IDUsuario)
ON UPDATE CASCADE
ON DELETE RESTRICT;


CREATE VIEW VW_AUDITORIA AS
SELECT A.IDMovimiento AS ID,CONCAT(U.Nombres, ' ' , U.Apellidos) AS USUARIO,A.Movimiento,A.Fecha,A.Hora 
FROM AUDITORIA AS A
JOIN USUARIOS AS U ON A.IDUsuario = U.IDUsuario ORDER BY A.IDMovimiento DESC;


CREATE VIEW ALL_CLTS AS
SELECT C.RNC,upper(C.NombreCliente) as CLIENTE,C.EmailCliente AS EMAIL,A.NombreADM AS ADMINISTRACION FROM CLIENTES AS C
JOIN ADM AS A ON C.IDADM = A.IDADM;


CREATE VIEW ALL_USRBLOCK AS
SELECT IDBlock,IP,CONCAT( Tiempo,' HORAS') AS Tiempo,CantidadBlock,Estatus
FROM USERS_BLOCKEDS WHERE Estatus <> 'L';


CREATE TABLE NOTIF_INCONSISTENCIA
(
IDNotificacion INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
IDEncargado INT NOT NULL,
IDCliente INT NOT NULL,
FechaNotif DATE NOT NULL,
FechaVenci DATE NOT NULL,
Notificacion json NOT NULL,
CartaNotif json NOT NULL
);


ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT
FK_IDENCARGADO_IDUSR FOREIGN KEY (IDEncargado)
REFERENCES USUARIOS (IDUsuario) 
ON DELETE CASCADE;


ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT FK_IDCLIENTE_IDCLT
FOREIGN KEY (IDCliente) REFERENCES CLIENTES(IDCliente)
ON DELETE CASCADE;


CREATE TABLE EMAILS_NOTIF
(
IDENotif INT PRIMARY KEY AUTO_INCREMENT,
IDNotif INT UNIQUE NOT NULL,
HoraRegistro DATETIME NOT NULL,
HoraEnvio DATETIME NOT NULL,
Estatus ENUM('T','F') DEFAULT 'F'
);


ALTER TABLE EMAILS_NOTIF ADD CONSTRAINT FK_IDNOT_IDNOTIF
FOREIGN KEY (IDNotif) REFERENCES NOTIF_INCONSISTENCIA(IDNotificacion)
ON DELETE CASCADE;


CREATE VIEW VW_VER_NotificacionES
AS
    SELECT 
		N.IDNotificacion AS 'ID',
        C.NombreCliente AS 'CLIENTE',
        REPLACE(REPLACE(REPLACE(JSON_UNQUOTE(JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION')), '[', ''), ']', ''),'"','') AS 'NOTIFICACIONES',
        REPLACE(REPLACE(REPLACE(JSON_UNQUOTE(JSON_EXTRACT(N.Notificacion, '$[*].IMPUESTO')), '[', ''), ']', ''),'"','') AS 'IMPUESTO AFECTADO',
        date_format(N.FechaNotif, '%d/%m/%Y') AS 'FECHA',
        date_format(N.FechaVenci, '%d/%m/%Y') AS 'VENCIMIENTO',
        E.Estatus AS 'CORREO'
    FROM 
        NOTIF_INCONSISTENCIA AS N 
        JOIN USUARIOS AS U ON N.IDEncargado = U.IDUsuario
        JOIN CLIENTES AS C ON C.IDCliente = N.IDCliente 
        JOIN EMAILS_NOTIF AS E ON N.IDNotificacion = E.IDNotif
ORDER BY CASE E.Estatus WHEN 'F' THEN 1 ELSE 2 END,N.FechaVenci ASC;



CREATE VIEW ALL_NOTIF AS
select IDNotificacion,REPLACE(REPLACE(REPLACE(JSON_UNQUOTE(JSON_EXTRACT(N.Notificacion, '$[*].Notificacion')), '[', ''), ']', ''),'"','') AS 'Notificacion' from notif_inconsistencia as n 
left join EMAILS_NOTIF as e on n.IDNotificacion = e.IDNotif
where e.Estatus = 'F';


/* PROCEDIMIENTOS */*\
DELIMITER $$

CREATE FUNCTION CORRECCION(A VARCHAR(20))
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
    DECLARE B VARCHAR(20);
    
    SET B = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(A, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z, -]', '');

    RETURN B;
END $$


CREATE FUNCTION DIASLABORABLES(FI DATE, DL INT)
RETURNS DATE
DETERMINISTIC
BEGIN
    DECLARE DL1 INT DEFAULT 0;
    DECLARE FF DATE;

    SET FF = FI;

    WHILE DL1 < DL DO
        SET FF = FF + INTERVAL 1 DAY;
        
        IF DAYOFWEEK(FF) NOT IN (1, 7) THEN
            SET DL1 = DL1 + 1;
        END IF;
    END WHILE;

    RETURN FF;
END $$


CREATE PROCEDURE `SP_VALIDAR_LOGIN` (
    IN in_EMAIL VARCHAR(50),
    IN in_CLAVE VARCHAR(15)
)
BEGIN
    IF NOT EXISTS (
        SELECT * 
        FROM USUARIOS 
        WHERE Email = in_EMAIL 
        AND CAST(AES_DECRYPT(Clave, in_EMAIL) AS CHAR(50)) = in_CLAVE 
        AND Estatus = 'T') THEN SELECT 'ECI' AS MENSAJE;
    
    ELSE 
        SELECT CClave, IDUsuario, Nombres, Apellidos, Privilegios, Token
        FROM USUARIOS 
        WHERE Email = in_EMAIL;
    END IF;
END $$


CREATE PROCEDURE `SP_INSERTAR_ADM`	
(IN NOMBRE VARCHAR(50), IN in_DIRECC VARCHAR(100))
BEGIN

IF EXISTS (SELECT * FROM ADM WHERE NombreADM = NOMBRE OR DireccionADM = in_DIRECC) THEN SELECT 'EAE' AS MENSAJE; 
ELSE 
	INSERT INTO ADM(NombreADM,DireccionADM) VALUES (NOMBRE,in_DIRECC);
	
    IF ROW_COUNT() > 0 THEN  SELECT 'AIC' AS MENSAJE;
	ELSE SELECT 'EIA' AS MENSAJE;  END IF;
END IF;
END $$


CREATE PROCEDURE `SP_MODIFICAR_ADM`
( IN in_IDADM INT,
IN in_NombreADM VARCHAR(50),
IN in_NNombreADM VARCHAR(50),
IN in_NDIRECCION_ADM VARCHAR(100)
) BEGIN

IF NOT EXISTS(SELECT * FROM ADM WHERE IDADM = in_IDADM AND NombreADM = in_NombreADM) THEN SELECT 'EELS' AS MENSAJE;
ELSEIF EXISTS (SELECT * FROM ADM WHERE IDADM <> in_IDADM AND NombreADM = in_NNombreADM AND DireccionADM = in_NDIRECCION_ADM) THEN SELECT 'EAE' AS MENSAJE;

ELSE UPDATE ADM SET NombreADM = in_NNombreADM, DireccionADM = in_NDIRECCION_ADM WHERE IDADM = in_IDADM;

IF ROW_COUNT() > 0 THEN SELECT 'AMC' AS MENSAJE;
ELSE SELECT 'EMA' AS MENSAJE; END IF;

END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_USUARIOS
(
    IN in_Email VARCHAR(50),
    IN in_Nombres VARCHAR(20),
    IN in_Apellidos VARCHAR(20),
    IN in_Privilegios VARCHAR(20),
    IN in_Token TEXT
)
BEGIN

IF NOT EXISTS (SELECT * FROM USUARIOS WHERE Email = in_Email) THEN

 INSERT INTO USUARIOS(Email, Nombres, Apellidos, Clave, Privilegios,Token)
 VALUES (in_Email,CORRECCION(in_Nombres), CORRECCION(in_Apellidos), AES_ENCRYPT('1234', in_Email), in_Privilegios,in_Token);

 IF ROW_COUNT() > 0 THEN SELECT 'UIC' AS MENSAJE;
 ELSE SELECT 'EIU' AS MENSAJE; END IF;

ELSE SELECT 'EUE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLAVES_USUARIOS
(
IN in_Email VARCHAR(50),
IN in_Clave VARCHAR(15),
IN in_NClave VARCHAR(15)
)
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE Email = in_Email AND CAST(AES_DECRYPT(Clave, in_Email) AS CHAR(50)) = in_Clave) THEN

	UPDATE USUARIOS SET Clave = AES_ENCRYPT(in_NClave, in_Email), CClave = 'T' WHERE Email = in_Email;
    if row_count() > 0 then	SELECT 'CMC' AS MENSAJE;
    ELSE SELECT 'EMC1' AS MENSAJE; END IF;

ELSE SELECT 'ECI' AS MENSAJE; END IF;
END $$



CREATE PROCEDURE SP_MODIFICAR_USUARIOS
    (
	  IN in_ID INT,
	  IN in_Token TEXT,
      IN in_Email VARCHAR(50),
      IN in_Nombres VARCHAR(20),
      IN in_Apellidos VARCHAR(20),
      IN in_NClave VARCHAR(15)
    )
BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE CONCAT(Nombres, ' ' ,Apellidos) = in_Token and IDUsuario = in_ID) THEN

IF NOT EXISTS(select * FROM USUARIOS WHERE Email = in_Email AND IDUsuario <> in_ID) THEN
    UPDATE USUARIOS SET
    Email = in_Email,
    Nombres = CORRECCION(in_Nombres),
    Apellidos = CORRECCION(in_Apellidos),
    Clave = AES_ENCRYPT(in_NClave, in_Email),
    CClave = "F" WHERE IDUsuario = in_ID;
    
    if row_count() > 0 then
    SELECT 'UMC' AS MENSAJE;
    else select 'EMU' AS MENSAJE; END IF;
    
ELSE SELECT 'EEE' AS MENSAJE; END IF;    

ELSE SELECT 'EMU' AS MENSAJE; END IF;
END $$



CREATE PROCEDURE `SP_VER_DATOS`
(IN in_ID INT, in_VALUE TEXT)
BEGIN

if exists(select * from USUARIOS where CONCAT(Nombres, ' ' ,Apellidos) = in_VALUE and IDUsuario = in_ID) then

select Email, Nombres, Apellidos, CAST(AES_DECRYPT(Clave, Email) AS CHAR(50)) AS Clave, Privilegios FROM USUARIOS WHERE CONCAT(Nombres, ' ' ,Apellidos) = in_VALUE and IDUsuario = in_ID;

ELSE SELECT 'EELS' AS MENSAJE; END IF;

END $$


CREATE PROCEDURE `SP_ELIMINAR_USUARIO`(
    IN in_ID INT,
    IN in_Token TEXT
) BEGIN

IF EXISTS(SELECT * FROM USUARIOS WHERE IDUsuario = in_ID AND CONCAT(Nombres, ' ' ,Apellidos) = in_Token) THEN
	
    UPDATE USUARIOS SET Estatus = 'F' WHERE IDUsuario = in_ID;
    
    IF ROW_COUNT() > 0 THEN SELECT 'UEC' AS MENSAJE;
    ELSE SELECT 'EEU' AS MENSAJE; END IF;   

ELSE SELECT 'EEU' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_CLIENTES
(
    IN in_RNC VARCHAR(11),
    IN in_EmailCliente VARCHAR(50),
    IN in_NombreCliente VARCHAR(50),
    IN in_IDADM INT
)
BEGIN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC OR EmailCliente = in_EmailCliente OR NombreCliente = in_NombreCliente ) THEN

    INSERT INTO CLIENTES(RNC,EmailCliente,NombreCliente,IDADM)
    VALUES (in_RNC,in_EmailCliente,CORRECCION(in_NombreCliente),in_IDADM);

    IF ROW_COUNT() > 0 THEN  SELECT 'CIC' AS MENSAJE;
    ELSE SELECT 'EIC' AS MENSAJE;  END IF;

ELSE SELECT 'ECE' AS MENSAJE; END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLIENTES
(   
 IN in_ID INT,
 IN in_NAME VARCHAR(50),
 IN in_RNC VARCHAR(11),
 IN in_Email VARCHAR(50),
 IN in_NOMBRE VARCHAR(50),
 IN in_IDADM INT
)
BEGIN

DECLARE NOMBREC TEXT;

SET NOMBREC = CORRECCION(in_NOMBRE);

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE NombreCliente = NOMBREC AND IDCliente != in_ID) THEN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC AND IDCliente != in_ID) THEN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE EmailCliente = in_Email AND IDCliente != in_ID) THEN

UPDATE CLIENTES 
    SET
    RNC = in_RNC,
    EmailCliente = in_Email,
    NombreCliente = NOMBREC,
    IDADM = in_IDADM 
    WHERE IDCliente = in_ID;

    IF ROW_COUNT() > 0 THEN SELECT 'CMC1' AS MENSAJE;
    ELSE SELECT 'EMC' AS MENSAJE; 
	END IF;

ELSE SELECT 'EEE' AS MENSAJE; END IF;

ELSE SELECT 'ERE' AS MENSAJE; END IF;

ELSE SELECT 'ECE' AS MENSAJE; END IF;

END $$



CREATE PROCEDURE SP_ELIMINAR_CLIENTES
(
    IN in_ID VARCHAR(11),
    IN in_NAME TEXT
)
BEGIN

IF EXISTS (SELECT * FROM CLIENTES WHERE IDCliente = in_ID AND NombreCliente = in_NAME) THEN
   
    DELETE FROM CLIENTES WHERE IDCliente = in_ID;
    SELECT 'CEC' AS MENSAJE;
 
ELSE SELECT 'EEC' AS MENSAJE; END IF;
END $$



CREATE PROCEDURE SP_VER_DATOS_CLIENTES
(
IN in_IDCliente INT,
IN in_NombreCliente VARCHAR(50)
) BEGIN
IF EXISTS (SELECT * FROM CLIENTES WHERE IDCliente = in_IDCliente AND NombreCliente = in_NombreCliente) THEN
SELECT C.RNC,C.EmailCliente,C.NombreCliente,C.IDADM,A.NombreADM FROM CLIENTES AS C
JOIN ADM AS A ON C.IDADM = A.IDADM WHERE C.IDCliente = in_IDCliente AND C.NombreCliente = in_NombreCliente;
ELSE SELECT 'EELC' AS 'MENSAJE';
END IF;
END $$



CREATE PROCEDURE BLOQUEAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN 

IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN 

INSERT INTO USERS_BLOCKEDS (COOKIE,IP,Tiempo,CantidadBlock,Estatus)
VALUES(IN_COOK,IN_IP,1.25,1,'B');

ELSE UPDATE USERS_BLOCKEDS SET
Tiempo = CantidadBlock + 1.25,
CantidadBlock = CantidadBlock + 1,
Estatus = 'B' 
WHERE COOKIE = IN_COOK AND IP = IN_IP;
END IF; END $$



CREATE PROCEDURE VALIDAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN
IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN
SELECT 'T' AS MENSAJE;

ELSEIF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP AND Estatus = 'B') THEN
SELECT 'T' AS MENSAJE;

ELSE SELECT 'F' AS MENSAJE;
END IF; END $$



CREATE EVENT IF NOT EXISTS `EVENT_BLOCKEDS` 
ON SCHEDULE EVERY 15 MINUTE 
DO 
BEGIN
    UPDATE USERS_BLOCKEDS 
    SET Tiempo = CASE WHEN Tiempo > 0 THEN Tiempo - 0.25 ELSE 0 END,
    Estatus = CASE WHEN Tiempo <= 0 THEN 'L' ELSE Estatus END
    WHERE Tiempo > 0;
END$$


CREATE PROCEDURE SP_MOVIMIENTOS
(
IN IN_IDUsuario INT,
IN IN_MOVIMIENTO VARCHAR(50)
)
BEGIN
INSERT INTO AUDITORIA(IDUsuario,MOVIMIENTO,FECHA,HORA)
VALUES(IN_IDUsuario,IN_MOVIMIENTO,DATE_FORMAT(CURRENT_DATE(), '%d-%m-%Y'),CURRENT_TIME());
END $$



CREATE PROCEDURE DESBLOQUEAR_USER
(
IN IN_ID INT
) BEGIN
UPDATE USERS_BLOCKEDS SET Tiempo = 0, Estatus = 'L' WHERE IDBlock = IN_ID;

IF row_count() > 0 THEN
SELECT 'UDC' AS MENSAJE;

ELSE SELECT 'EDU' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_NOTIF
(
IN IN_IDEncargado INT,
IN IN_IDCliente INT,
IN IN_FechaNotif DATE,
IN IN_Notificacion JSON,
IN IN_CartaNotif JSON
)
BEGIN

  DECLARE FechaFinal DATE;
    
  SELECT DIASLABORABLES(IN_FechaNotif,5) INTO FechaFinal;

IF (IFNULL((SELECT SUM(JSON_CONTAINS(JSON_EXTRACT(Notificacion, '$[*].NOTIFICACION'), JSON_EXTRACT(IN_Notificacion, '$[*].NOTIFICACION'))) FROM notif_inconsistencia), 0) = 0) THEN

INSERT INTO NOTIF_INCONSISTENCIA(IDEncargado,IDCliente,FechaNotif,FechaVenci,Notificacion,CartaNotif)
VALUES (IN_IDEncargado,IN_IDCliente,IN_FechaNotif,FechaFinal,IN_Notificacion,IN_CartaNotif);

IF ROW_COUNT() > 0 THEN
SELECT 'NIC' AS MENSAJE;
ELSE SELECT 'EIN' AS MENSAJE;
END IF;

ELSE SELECT 'ENE' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_INSERT_EMAIL_NOTIF
(
IN IN_NON JSON
) BEGIN

DECLARE IN_IDN INT;

SELECT IDNotificacion FROM notif_inconsistencia WHERE (SELECT SUM(JSON_CONTAINS(JSON_EXTRACT(Notificacion,'$[*].NOTIFICACION'),IN_NON))) > 0 INTO IN_IDN;

IF NOT EXISTS (SELECT * FROM EMAILS_NOTIF WHERE IDNotif = IN_IDN) THEN
INSERT INTO EMAILS_NOTIF(IDNotif,HoraRegistro,HoraEnvio) VALUES(IN_IDN,now(),DATE_ADD(now(), INTERVAL 5 HOUR));
ELSE SELECT 'EELS' AS 'MENSAJE'; END IF;
END $$


CREATE PROCEDURE SP_VER_CARTA
(
IN IN_IDNOT INT
)
BEGIN

IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT) THEN
SELECT CartaNotif AS 'CARTA' FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT;
END IF;
END$$


CREATE PROCEDURE SENDMAIL_NOTIF(IN SEARCH INT) BEGIN
SELECT 
	E.IDNotif,
    C.EmailCliente AS EMCLT,
    C.NombreCliente AS NOCLT, 
    JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION') AS NONOTIF,
    JSON_EXTRACT(N.Notificacion, '$[*].IMPUESTO') AS IMPU,
    N.CartaNotif AS CARTA,
    JSON_LENGTH(N.Notificacion) AS SIZE
FROM EMAILS_NOTIF AS E
JOIN NOTIF_INCONSISTENCIA AS N ON E.IDNotif = N.IDNotificacion
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE E.Estatus = "F" AND N.IDNotificacion = SEARCH;
END $$


CREATE PROCEDURE SP_ELIMINAR_NOTIF
(IN IN_IDN INT, IN IN_NONO VARCHAR(100))
BEGIN

IF EXISTS (
SELECT IDNotificacion FROM NOTIF_INCONSISTENCIA
WHERE (SELECT REPLACE(REPLACE(REPLACE(JSON_UNQUOTE(JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION')), '[', ''), ']', ''),'"','') 
FROM NOTIF_INCONSISTENCIA AS N WHERE N.IDNotificacion = IN_IDN ) = IN_NONO)

THEN DELETE FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDN;

IF ROW_COUNT() > 0 THEN
SELECT 'NEC' AS MENSAJE;

ELSE SELECT 'EEN' AS MENSAJE;
END IF;

ELSE SELECT 'EELS' AS MENSAJE;
END IF;
END$$


CREATE PROCEDURE SP_GET_CC
(IN_NTF INT)
BEGIN
 SELECT C.EmailCliente,C.CC FROM notif_inconsistencia AS N 
 JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
 WHERE N.IDNotificacion = IN_NTF;
END$$


CREATE PROCEDURE SP_ADD_CC
(IN_NTF INT, IN_CC JSON)
BEGIN
DECLARE IN_CL INT;

 SELECT IDCliente FROM notif_inconsistencia AS N 
 JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
 WHERE N.IDNotificacion = IN_NTF INTO IN_CL;
 
IF (SELECT IFNULL(SUM(JSON_CONTAINS(CC, IN_CC)), 0) FROM CLIENTES WHERE IDCliente = IN_CL) = 0 THEN
UPDATE CLIENTES SET CC = IN_CC WHERE IDCliente = IN_CL;
END IF;
END$$

DELIMITER ;