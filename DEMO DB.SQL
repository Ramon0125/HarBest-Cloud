DROP DATABASE IF EXISTS DEMO_FIDUCIAL;
CREATE DATABASE DEMO_FIDUCIAL;
USE DEMO_FIDUCIAL;


SET GLOBAL event_scheduler = ON;
SET SQL_SAFE_UPDATES = 0;


/*TABLA USUARIOS*/
CREATE TABLE USUARIOS
(
IDUsuario INT AUTO_INCREMENT PRIMARY KEY,
Email VARCHAR(50) NOT NULL UNIQUE,
Nombres VARCHAR(20) NOT NULL,
Apellidos VARCHAR(20) NOT NULL,
Clave VARBINARY(100) NOT NULL,
Privilegios ENUM('ADMINISTRADOR','CASOS FISCALES','CONSULTA') NOT NULL,
CClave ENUM('T','F') NOT NULL DEFAULT 'F',
Estatus ENUM('T','F') NOT NULL DEFAULT 'T',
Token TEXT NOT NULL
);


insert into USUARIOS(IDUsuario,Email,Nombres,Apellidos,Clave,Privilegios,CClave,Estatus,Token)
VALUES (1,'impuestos@harbest.net','ADMIN','HARBEST',aes_encrypt('24MO410W','impuestos@harbest.net'),'ADMINISTRADOR','T','T','1645538412857');


CREATE VIEW VW_USERS AS 
SELECT IDUsuario,CONCAT(Nombres,' ',Apellidos) as NOMBRE 
FROM USUARIOS where Privilegios <> 'ADMINISTRADOR' AND Estatus = 'T';


CREATE VIEW ALL_USER AS
SELECT IDUsuario AS ID,Email,CONCAT(Nombres,' ',Apellidos) AS NOMBRE,CClave,IF(Estatus = 'T', 'ACTIVO', 'INACTIVO') AS ESTADO
FROM USUARIOS WHERE Privilegios <> 'ADMINISTRADOR';
/*FIN DE TABLA USUARIOS*/


CREATE TABLE ADM
(
 IDADM INT AUTO_INCREMENT PRIMARY KEY,
 NombreADM VARCHAR(50) NOT NULL UNIQUE,
 DireccionADM VARCHAR(100) NOT NULL UNIQUE
);


/*TABLA CLIENTES*/
CREATE TABLE CLIENTES
(
IDCliente INT AUTO_INCREMENT PRIMARY KEY,
RNC VARCHAR(11) NOT NULL UNIQUE,
EmailCliente VARCHAR(100) NOT NULL,
NombreCliente VARCHAR(100) NOT NULL UNIQUE,
TipoCliente ENUM('Fisica','Juridica') NOT NULL DEFAULT 'Juridica',
IDADM INT DEFAULT 1 NOT NULL,
CC JSON
);

ALTER TABLE CLIENTES ADD CONSTRAINT FK_CLIENTES_ADM
FOREIGN KEY (IDADM) REFERENCES ADM(IDADM);

CREATE VIEW VW_CLIENTES
AS SELECT IDCliente, upper(NombreCliente) AS NombreCliente FROM CLIENTES;

CREATE VIEW ALL_CLTS AS
SELECT C.RNC, upper(C.NombreCliente) as CLIENTE, C.EmailCliente AS EMAIL, C.TipoCliente AS 'TIPO PERSONA', A.NombreADM AS ADMINISTRACION FROM CLIENTES AS C
JOIN ADM AS A ON C.IDADM = A.IDADM;

CREATE VIEW VW_ADM AS
SELECT A.IDADM AS ID, A.NombreADM AS ADMINISTRACION, A.DireccionADM AS DIRECCION,count(C.IDADM) AS CLIENTES FROM ADM AS A
LEFT JOIN CLIENTES AS C ON A.IDADM = C.IDADM GROUP BY A.IDADM;
/* FIN TABLA CLIENTES*/


CREATE TABLE USERS_BLOCKEDS
(
IDBlock INT PRIMARY KEY AUTO_INCREMENT,
Cookie VARCHAR(100) NOT NULL UNIQUE,
IP VARCHAR(100) NOT NULL, 
Tiempo DOUBLE NOT NULL,
CantidadBlock INT DEFAULT 0,
Estatus ENUM('L','B') NOT NULL DEFAULT 'B'
);

CREATE VIEW ALL_USRBLOCK AS
SELECT IDBlock,IP,CONCAT( Tiempo,' HORAS') AS Tiempo,CantidadBlock,Estatus
FROM USERS_BLOCKEDS WHERE Estatus <> 'L';


CREATE TABLE AUDITORIA
(
IDMovimiento INT AUTO_INCREMENT PRIMARY KEY,
IDUsuario INT NOT NULL,
Movimiento VARCHAR(100) NOT NULL,
Fecha Date NOT NULL,
Hora TIME NOT NULL
);

ALTER TABLE AUDITORIA ADD CONSTRAINT FK_AUDITORIA_USUARIOS
FOREIGN KEY (IDUsuario) REFERENCES USUARIOS(IDUsuario)
ON UPDATE CASCADE
ON DELETE RESTRICT;

CREATE VIEW VW_AUDITORIA AS
SELECT A.IDMovimiento AS ID,CONCAT(U.Nombres, ' ' , U.Apellidos) AS USUARIO,A.Movimiento,A.Fecha,A.Hora 
FROM AUDITORIA AS A
JOIN USUARIOS AS U ON A.IDUsuario = U.IDUsuario
WHERE U.Privilegios <> 'ADMINISTRADOR' 
ORDER BY A.IDMovimiento DESC;


CREATE TABLE NOTIF_INCONSISTENCIA
(
IDNotificacion INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
CodigoNotif CHAR(12) UNIQUE KEY,
IDEncargado INT NOT NULL,
IDCliente INT NOT NULL,
FechaNotif DATE NOT NULL,
FechaVenci DATE NOT NULL,
Notificacion json NOT NULL,
CartaNotif json NOT NULL
);

ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT
FK_IDENCARGADO_IDUSR FOREIGN KEY (IDEncargado)
REFERENCES USUARIOS (IDUsuario) 
ON DELETE CASCADE;

ALTER TABLE NOTIF_INCONSISTENCIA ADD CONSTRAINT FK_NOTIF_CLIENTES
FOREIGN KEY (IDCliente) REFERENCES CLIENTES(IDCliente)
ON DELETE CASCADE;


CREATE TABLE EMAILS_NOTIF
(
IDENotif INT PRIMARY KEY AUTO_INCREMENT,
IDNotif INT UNIQUE NOT NULL,
HoraRegistro DATETIME NOT NULL,
HoraEnvio DATETIME,
Estatus ENUM('T','F') DEFAULT 'F'
);

ALTER TABLE EMAILS_NOTIF ADD CONSTRAINT FK_ENOTIF_NOTIF
FOREIGN KEY (IDNotif) REFERENCES NOTIF_INCONSISTENCIA(IDNotificacion)
ON DELETE CASCADE;


CREATE VIEW ALL_NOTIF AS
select N.IDNotificacion,N.CodigoNotif AS 'Notificacion' 
from NOTIF_INCONSISTENCIA as N 
left join EMAILS_NOTIF as e on N.IDNotificacion = e.IDNotif
where e.Estatus = 'F';


CREATE TABLE DETALLE_CITACION (
  IDDetalle int NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CodigoNotif char(12) NOT NULL UNIQUE KEY,
  Fecha date NOT NULL,
  FechaVenci date NOT NULL,
  DetallesCitacion json NOT NULL,
  CartasDetalles json NOT NULL,
  CorreoAuditor varchar(50),
  NombreAuditor varchar(50),
  TelAuditor varchar(20)
);

ALTER TABLE DETALLE_CITACION ADD CONSTRAINT FK_DETALLE_CITACION_NOTIF
FOREIGN KEY (`CodigoNotif`) REFERENCES NOTIF_INCONSISTENCIA (`CodigoNotif`)
ON DELETE CASCADE;


CREATE TABLE EMAILS_DETALLE (
IDEDetalle int NOT NULL AUTO_INCREMENT PRIMARY KEY,
IDDetalle int NOT NULL UNIQUE,
HoraRegistro datetime NOT NULL,
HoraEnvio datetime,
Estatus enum('T','F') DEFAULT 'F'
);

ALTER TABLE EMAILS_DETALLE ADD CONSTRAINT `FK_EDETALLE_DETALLE` FOREIGN KEY (`IDDetalle`) 
REFERENCES DETALLE_CITACION (`IDDetalle`) ON DELETE CASCADE;


CREATE VIEW ALL_DETALLES AS
SELECT D.IDDetalle,D.CodigoNotif FROM DETALLE_CITACION AS D
LEFT JOIN EMAILS_DETALLE AS E ON D.IDDetalle = E.IDDetalle
WHERE E.Estatus = 'F';


CREATE TABLE ESCRITO_DESCARGO
(
IDEscrito INT AUTO_INCREMENT PRIMARY KEY,
CodigoNotif CHAR(12) NOT NULL UNIQUE,
FechaEscrito DATE NOT NULL,
FechaVenci DATE NOT NULL,
ArchivoEscrito JSON NOT NULL
);

ALTER TABLE ESCRITO_DESCARGO ADD CONSTRAINT FK_ESCRITO_NOTIF
FOREIGN KEY (CodigoNotif) REFERENCES NOTIF_INCONSISTENCIA(CodigoNotif)
ON DELETE CASCADE;


CREATE TABLE EMAILS_ESCRITO
(
IDEEscrito INT PRIMARY KEY AUTO_INCREMENT,
IDEscrito INT UNIQUE NOT NULL,
HoraRegistro DATETIME NOT NULL,
HoraEnvio DATETIME,
Estatus ENUM('T','F') DEFAULT 'F'
);


ALTER TABLE EMAILS_ESCRITO ADD CONSTRAINT FK_EESCRITO_ESCRITO
FOREIGN KEY (IDEscrito) REFERENCES ESCRITO_DESCARGO(IDEscrito)
ON DELETE CASCADE;


CREATE VIEW ALL_ESCRITO AS
SELECT E.IDEscrito,E.CodigoNotif FROM ESCRITO_DESCARGO AS E
LEFT JOIN EMAILS_ESCRITO AS EE ON E.IDEscrito = EE.IDEscrito
WHERE EE.Estatus = 'F';


CREATE TABLE RESPUESTA_DGII
(
IDRespuesta INT AUTO_INCREMENT PRIMARY KEY,
CodigoNotif CHAR(12) NOT NULL UNIQUE,
FechaRespuesta DATE NOT NULL,
FechaVenci DATE,
Comentarios TEXT NOT NULL,
TipoRespuesta ENUM('Acta de descargo','Aceptacion de inconsistencia','Resolucion de determinacion') NOT NULL,
ArchivoRespuesta JSON NOT NULL
);


ALTER TABLE RESPUESTA_DGII ADD CONSTRAINT FK_RESPUESTA_NOTIF
FOREIGN KEY (CodigoNotif) REFERENCES NOTIF_INCONSISTENCIA(CodigoNotif)
ON DELETE CASCADE;


CREATE TABLE EMAILS_RESPUESTA
(
IDERespuesta INT PRIMARY KEY AUTO_INCREMENT,
IDRespuesta INT UNIQUE NOT NULL,
HoraRegistro DATETIME NOT NULL,
HoraEnvio DATETIME,
Estatus ENUM('T','F') DEFAULT 'F'
);


ALTER TABLE EMAILS_RESPUESTA ADD CONSTRAINT FK_ERESPUESTA_RESPUESTA
FOREIGN KEY (IDRespuesta) REFERENCES RESPUESTA_DGII(IDRespuesta)
ON DELETE CASCADE;


CREATE VIEW ALL_RESPUESTA AS
SELECT RD.IDRespuesta,RD.CodigoNotif FROM RESPUESTA_DGII AS RD
LEFT JOIN EMAILS_RESPUESTA AS ER ON RD.IDRespuesta = ER.IDRespuesta
WHERE ER.Estatus = 'F';


CREATE TABLE PRORROGA
(
IDProrroga INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
CodigoNotif CHAR(12) NOT NULL,
FechaProrroga DATE NOT NULL,
ArchivoProrroga JSON NOT NULL,
ComentarioProrroga TEXT NOT NULL,
HoraRegistro DATETIME NOT NULL,
HoraEnvio DATETIME,
Estatus ENUM('T','F') DEFAULT 'F'
);


ALTER TABLE PRORROGA ADD CONSTRAINT FK_PRORROGA_NOTIFICACION
FOREIGN KEY PRORROGA(CodigoNotif) REFERENCES NOTIF_INCONSISTENCIA(CodigoNotif);


 CREATE VIEW VW_PRORROGAS AS
SELECT DISTINCT N.CodigoNotif
FROM NOTIF_INCONSISTENCIA AS N
JOIN EMAILS_NOTIF AS EN ON N.IDNotificacion = EN.IDNotif
JOIN CLIENTES AS C ON C.IDCliente = N.IDCliente 
LEFT JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
LEFT JOIN ESCRITO_DESCARGO AS EDD ON N.CodigoNotif = EDD.CodigoNotif
LEFT JOIN RESPUESTA_DGII AS RD ON N.CodigoNotif = RD.CodigoNotif
LEFT JOIN EMAILS_DETALLE AS ED ON D.IDDetalle = ED.IDDetalle
LEFT JOIN EMAILS_ESCRITO AS EE ON EDD.IDEscrito = EE.IDEscrito
LEFT JOIN EMAILS_RESPUESTA AS ER ON RD.IDRespuesta = ER.IDRespuesta
LEFT JOIN PRORROGA AS P ON N.CodigoNotif = P.CodigoNotif
WHERE COALESCE(ER.Estatus, EE.Estatus, ED.Estatus, EN.Estatus) <> 'F'
AND ER.Estatus IS NULL AND NOT EXISTS ( SELECT 1 FROM PRORROGA AS P2 WHERE P2.CodigoNotif = N.CodigoNotif AND P2.Estatus = 'F');


CREATE VIEW ALL_PRORROGA AS 
SELECT IDProrroga, CodigoNotif FROM PRORROGA WHERE HoraEnvio IS NULL AND Estatus = 'F';


CREATE VIEW VW_CASOS
 AS
  SELECT 
   N.CodigoNotif AS `CODIGO`,
   C.NombreCliente AS `CLIENTE`,
   C.EmailCliente AS `EMAIL CLIENTE`,
   JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION') AS `NOTIFICACIONES`,
   date_format(N.FechaNotif, '%d/%m/%Y') AS 'FECHA INICIO',
   date_format(COALESCE(RD.FechaVenci, EDD.FechaVenci, D.FechaVenci, N.FechaVenci), '%d/%m/%Y') AS `FECHA VENCIMIENTO`,
   CASE
    WHEN COALESCE(RD.FechaVenci, EDD.FechaVenci, D.FechaVenci, N.FechaVenci) < CURDATE() THEN 'V'
	WHEN ER.Estatus = 'T' AND RD.TipoRespuesta != 'Resolucion de determinacion' THEN 'C'
	ELSE 'P' 
   END AS `ESTADO`
   FROM NOTIF_INCONSISTENCIA AS N
   JOIN CLIENTES AS C ON C.IDCliente = N.IDCliente 
   LEFT JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
   LEFT JOIN ESCRITO_DESCARGO AS EDD ON N.CodigoNotif = EDD.CodigoNotif
   LEFT JOIN RESPUESTA_DGII AS RD ON N.CodigoNotif = RD.CodigoNotif
   JOIN EMAILS_NOTIF AS EN ON N.IDNotificacion = EN.IDNotif
   LEFT JOIN EMAILS_DETALLE AS ED ON D.IDDetalle = ED.IDDetalle
   LEFT JOIN EMAILS_ESCRITO AS EE ON EDD.IDEscrito = EE.IDEscrito
   LEFT JOIN EMAILS_RESPUESTA AS ER ON RD.IDRespuesta = ER.IDRespuesta
   ORDER BY 
    CASE 
     WHEN `ESTADO` = 'C' THEN 3
	 WHEN `ESTADO` = 'V' THEN 2
     ELSE 1 
    END, DATE_FORMAT(STR_TO_DATE(`FECHA VENCIMIENTO`, '%d/%m/%Y'), '%Y/%m/%d') ASC;


CREATE VIEW ALL_NOTIF_FOR_RESPUESTA AS
SELECT DISTINCT ED.CodigoNotif
FROM ESCRITO_DESCARGO AS ED
LEFT JOIN EMAILS_ESCRITO AS EE ON ED.IDEscrito = EE.IDEscrito
LEFT JOIN RESPUESTA_DGII AS RD ON ED.CodigoNotif = RD.CodigoNotif
LEFT JOIN PRORROGA AS P ON ED.CodigoNotif = P.CodigoNotif
WHERE COALESCE(P.Estatus, EE.Estatus) = 'T' AND RD.CodigoNotif IS NULL
AND NOT EXISTS (SELECT 1 FROM PRORROGA AS P2 WHERE P2.CodigoNotif = ED.CodigoNotif AND P2.Estatus = 'F');


CREATE VIEW ALL_NOTIF_FOR_ESCRITO AS
SELECT DISTINCT D.CodigoNotif 
FROM DETALLE_CITACION AS D
LEFT JOIN EMAILS_DETALLE AS E ON D.IDDetalle = E.IDDetalle
LEFT JOIN ESCRITO_DESCARGO AS ED ON D.CodigoNotif = ED.CodigoNotif
LEFT JOIN PRORROGA AS P ON D.CodigoNotif = P.CodigoNotif
WHERE COALESCE(P.Estatus, E.Estatus) = 'T' AND ED.CodigoNotif IS NULL
AND NOT EXISTS ( SELECT 1 FROM PRORROGA AS P2 WHERE P2.CodigoNotif = D.CodigoNotif AND P2.Estatus = 'F');


CREATE VIEW ALL_NOTIF_FOR_DETALLE AS
SELECT DISTINCT N.CodigoNotif
FROM NOTIF_INCONSISTENCIA AS N 
LEFT JOIN EMAILS_NOTIF AS E ON N.IDNotificacion = E.IDNotif
LEFT JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
LEFT JOIN PRORROGA AS P ON N.CodigoNotif = P.CodigoNotif
WHERE COALESCE(P.Estatus, E.Estatus) = 'T' AND D.CodigoNotif IS NULL
AND NOT EXISTS ( SELECT P2.IDProrroga FROM PRORROGA AS P2 WHERE P2.CodigoNotif = N.CodigoNotif AND P2.Estatus = 'F');

   
/* PROCEDIMIENTOS */*\
DELIMITER $$

CREATE FUNCTION CORRECCION(STR VARCHAR(100))
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE NEWSTR VARCHAR(100);
    
    SET NEWSTR = REGEXP_REPLACE(UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(STR, 'á', 'a'), 'é', 'e'), 'í', 'i'), 'ó', 'o'), 'ú', 'u')), '[^a-zA-Z0-9ñÑ,. -]', '');

    RETURN NEWSTR;
END $$


CREATE FUNCTION DIASLABORABLES(FechaInicial DATE, DiasLaborables INT)
RETURNS DATE
DETERMINISTIC
BEGIN
    DECLARE ContadorDias INT DEFAULT 0;
    DECLARE FechaFinal DATE;

    SET FechaFinal = FechaInicial;

    WHILE ContadorDias < DiasLaborables DO
        SET FechaFinal = FechaFinal + INTERVAL 1 DAY;
        
        IF DAYOFWEEK(FechaFinal) NOT IN (1, 7) THEN
            SET ContadorDias = ContadorDias + 1;
        END IF;
    END WHILE;

    RETURN FechaFinal;
END $$


CREATE PROCEDURE `SP_VALIDAR_LOGIN` (
    IN in_EMAIL VARCHAR(50),
    IN in_CLAVE VARCHAR(20)
)
BEGIN
    IF NOT EXISTS (
        SELECT * 
        FROM USUARIOS 
        WHERE Email = in_EMAIL 
        AND CAST(AES_DECRYPT(Clave, in_EMAIL) AS CHAR(50)) = in_CLAVE 
        AND Estatus = 'T') THEN SELECT 'ECI' AS MENSAJE;
    
    ELSE 
        SELECT CClave, IDUsuario, Nombres, Apellidos, Privilegios, Token
        FROM USUARIOS 
        WHERE Email = in_EMAIL;
    END IF;
END $$


CREATE PROCEDURE `SP_INSERTAR_ADM`	
(IN NOMBRE VARCHAR(50), IN in_DIRECC VARCHAR(100))
BEGIN

IF EXISTS (SELECT * FROM ADM WHERE NombreADM = NOMBRE OR DireccionADM = in_DIRECC) THEN SELECT 'EAE' AS MENSAJE; 
ELSE 
	INSERT INTO ADM(NombreADM,DireccionADM) VALUES (NOMBRE,in_DIRECC);
	
    IF ROW_COUNT() > 0 THEN  SELECT 'AIC' AS MENSAJE;
	ELSE SELECT 'EIA' AS MENSAJE;  END IF;
END IF;
END $$


CREATE PROCEDURE `SP_MODIFICAR_ADM`
(
    IN in_IDADM INT,
    IN in_NombreADM VARCHAR(50),
    IN in_NNombreADM VARCHAR(50),
    IN in_NDIRECCION_ADM VARCHAR(100)
) 
BEGIN

    IF NOT EXISTS (SELECT * FROM ADM WHERE IDADM = in_IDADM AND NombreADM = in_NombreADM) THEN
        SELECT 'EELS' AS MENSAJE;
    ELSEIF EXISTS (SELECT * FROM ADM WHERE (IDADM <> in_IDADM AND NombreADM = in_NNombreADM) OR (IDADM <> in_IDADM AND DireccionADM = in_NDIRECCION_ADM)) THEN
        SELECT 'EAE' AS MENSAJE;
    ELSE
        UPDATE ADM 
        SET NombreADM = in_NNombreADM, DireccionADM = in_NDIRECCION_ADM 
        WHERE IDADM = in_IDADM;

        IF ROW_COUNT() > 0 THEN
            SELECT 'AMC' AS MENSAJE;
        ELSE
            SELECT 'EMA' AS MENSAJE;
        END IF;
    END IF;

END $$


CREATE PROCEDURE SP_INSERTAR_USUARIOS
(
    IN in_Email VARCHAR(50),
    IN in_Nombres VARCHAR(20),
    IN in_Apellidos VARCHAR(20),
    IN in_Privilegios VARCHAR(20),
    IN in_Token TEXT
)
BEGIN

IF EXISTS (SELECT * FROM USUARIOS WHERE Email = in_Email) THEN SELECT 'EUE' AS MENSAJE;

ELSE
 INSERT INTO USUARIOS(Email, Nombres, Apellidos, Clave, Privilegios,Token)
 VALUES (in_Email,CORRECCION(in_Nombres), CORRECCION(in_Apellidos), AES_ENCRYPT('1234', in_Email), in_Privilegios,in_Token);
 
 IF ROW_COUNT() > 0 THEN SELECT 'UIC' AS MENSAJE;
 ELSE SELECT 'EIU' AS MENSAJE; END IF;
 
END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLAVES_USUARIOS
(
IN in_Email VARCHAR(50),
IN in_Clave VARCHAR(20),
IN in_NClave VARCHAR(20)
)
BEGIN

IF NOT EXISTS(SELECT * FROM USUARIOS WHERE Email = in_Email AND CAST(AES_DECRYPT(Clave, in_Email) AS CHAR(50)) = in_Clave) THEN 
	SELECT 'ECI' AS MENSAJE;

ELSE 	
 UPDATE USUARIOS SET Clave = AES_ENCRYPT(in_NClave, in_Email), CClave = 'T' WHERE Email = in_Email;
 
 if row_count() > 0 then	SELECT 'CMC' AS MENSAJE;
 ELSE SELECT 'EMC1' AS MENSAJE; END IF; 
 END IF;
END $$



CREATE PROCEDURE SP_MODIFICAR_USUARIOS
    (
	  IN in_ID INT,
	  IN in_Token TEXT,
      IN in_Email VARCHAR(50),
      IN in_Nombres VARCHAR(20),
      IN in_Apellidos VARCHAR(20),
      IN in_NClave VARCHAR(15)
    )
BEGIN

IF NOT EXISTS(SELECT * FROM USUARIOS WHERE CONCAT(Nombres, ' ' ,Apellidos) = in_Token and IDUsuario = in_ID) THEN SELECT 'EMU' AS MENSAJE;

ELSE
 IF EXISTS(select * FROM USUARIOS WHERE Email = in_Email AND IDUsuario <> in_ID) THEN SELECT 'EEE' AS MENSAJE;
   
 ELSE     
  UPDATE USUARIOS SET
  Email = in_Email,
  Nombres = CORRECCION(in_Nombres),
  Apellidos = CORRECCION(in_Apellidos),
  Clave = AES_ENCRYPT(in_NClave, in_Email),
  CClave = "F" 
  WHERE IDUsuario = in_ID and
  CONCAT(Nombres, ' ' ,Apellidos) = in_Token;
    
  if row_count() > 0 then
  SELECT 'UMC' AS MENSAJE;
  else select 'EMU' AS MENSAJE; END IF; END IF; 
END IF;
END $$



CREATE PROCEDURE `SP_VER_DATOS`
(IN in_ID INT, in_VALUE TEXT)
BEGIN

IF NOT EXISTS(SELECT * FROM USUARIOS WHERE CONCAT(Nombres, ' ' ,Apellidos) = in_VALUE AND IDUsuario = in_ID) THEN SELECT 'EELS' AS MENSAJE;

ELSE
	SELECT Email, Nombres, Apellidos, Privilegios 
    FROM USUARIOS WHERE CONCAT(Nombres, ' ' ,Apellidos) = in_VALUE and IDUsuario = in_ID;
END IF;

END $$


CREATE PROCEDURE `SP_ELIMINAR_USUARIO`(
    IN in_ID INT,
    IN in_Token TEXT
) BEGIN

IF NOT EXISTS(SELECT * FROM USUARIOS WHERE IDUsuario = in_ID AND CONCAT(Nombres, ' ' ,Apellidos) = in_Token) THEN 
 SELECT 'EEU' AS MENSAJE;
	
ELSE
 UPDATE USUARIOS SET Estatus = 'F' WHERE IDUsuario = in_ID;
    
 IF ROW_COUNT() > 0 THEN SELECT 'UEC' AS MENSAJE;
 ELSE SELECT 'EEU' AS MENSAJE; END IF;  END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_CLIENTES
(
    IN in_RNC VARCHAR(11),
    IN in_EmailCliente VARCHAR(100),
    IN in_NombreCliente VARCHAR(100),
    IN in_TipoCliente VARCHAR(8),
    IN in_IDADM INT
)
BEGIN

IF EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC OR EmailCliente = in_EmailCliente OR NombreCliente = in_NombreCliente ) THEN
SELECT 'ECE' AS MENSAJE;

ELSE
 INSERT INTO CLIENTES(RNC,EmailCliente,NombreCliente,TipoCliente,IDADM)
 VALUES (in_RNC,in_EmailCliente,CORRECCION(in_NombreCliente),in_TipoCliente,in_IDADM);

 IF ROW_COUNT() > 0 THEN  SELECT 'CIC' AS MENSAJE;
 ELSE SELECT 'EIC' AS MENSAJE;  END IF;
END IF;
END $$


CREATE PROCEDURE SP_MODIFICAR_CLIENTES
(   
 IN in_ID INT,
 IN in_NAME VARCHAR(100),
 IN in_RNC VARCHAR(11),
 IN in_Email VARCHAR(100),
 IN in_NOMBRE VARCHAR(100),
 IN in_Tipo VARCHAR(8),
 IN in_IDADM INT
)
BEGIN

DECLARE NOMBREC TEXT;

SET NOMBREC = CORRECCION(in_NOMBRE);

IF EXISTS (SELECT * FROM CLIENTES WHERE NombreCliente = NOMBREC AND IDCliente != in_ID) THEN
 SELECT 'ECE' AS MENSAJE;
 
ELSEIF EXISTS (SELECT * FROM CLIENTES WHERE RNC = in_RNC AND IDCliente != in_ID) THEN 
 SELECT 'ERE' AS MENSAJE;

ELSEIF NOT EXISTS (SELECT * FROM CLIENTES WHERE IDCliente = in_ID AND NombreCliente = in_NAME) THEN
 SELECT 'EELS' AS MENSAJE;
 
ELSE

  UPDATE CLIENTES 
    SET RNC = in_RNC,
    EmailCliente = in_Email,
    NombreCliente = NOMBREC,
    TipoCliente = in_Tipo,
    IDADM = in_IDADM 
  WHERE IDCliente = in_ID;

  IF ROW_COUNT() > 0 THEN SELECT 'CMC1' AS MENSAJE;
  ELSE SELECT 'EMC' AS MENSAJE; END IF;
  
END IF; 

END $$


CREATE PROCEDURE SP_ELIMINAR_CLIENTES
(
    IN in_ID INT,
    IN in_NAME VARCHAR(100)
)
BEGIN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE IDCliente = in_ID AND NombreCliente = in_NAME) THEN
SELECT 'EELS' AS MENSAJE;
 
ELSE
	DELETE FROM CLIENTES WHERE IDCliente = in_ID AND NombreCliente = in_NAME;
    
      IF ROW_COUNT() > 0 THEN SELECT 'CEC' AS MENSAJE;
	  ELSE SELECT 'EEC' AS MENSAJE; END IF;
END IF;
END $$


CREATE PROCEDURE SP_VER_DATOS_CLIENTES
(
IN in_IDCliente INT,
IN in_NombreCliente VARCHAR(100)
) BEGIN

IF NOT EXISTS (SELECT * FROM CLIENTES WHERE IDCliente = in_IDCliente AND NombreCliente = in_NombreCliente) THEN
 SELECT 'EELS' AS 'MENSAJE';
  
ELSE
  SELECT C.RNC,C.EmailCliente,C.NombreCliente,TipoCliente,C.IDADM,A.NombreADM FROM CLIENTES AS C
  JOIN ADM AS A ON C.IDADM = A.IDADM WHERE C.IDCliente = in_IDCliente AND C.NombreCliente = in_NombreCliente;
END IF;

END $$


CREATE PROCEDURE BLOQUEAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN 

IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN 

INSERT INTO USERS_BLOCKEDS (COOKIE,IP,Tiempo,CantidadBlock,Estatus)
VALUES(IN_COOK,IN_IP,1.25,1,'B');

ELSE UPDATE USERS_BLOCKEDS SET
Tiempo = CantidadBlock + 1.25,
CantidadBlock = CantidadBlock + 1,
Estatus = 'B' 
WHERE COOKIE = IN_COOK AND IP = IN_IP;
END IF; END $$



CREATE PROCEDURE VALIDAR_USER
(
IN IN_COOK VARCHAR(100),
IN IN_IP VARCHAR(100)
) BEGIN
IF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP) THEN
SELECT 'T' AS MENSAJE;

ELSEIF NOT EXISTS (SELECT * FROM USERS_BLOCKEDS WHERE COOKIE = IN_COOK AND IP = IN_IP AND Estatus = 'B') THEN
SELECT 'T' AS MENSAJE;

ELSE SELECT 'F' AS MENSAJE;
END IF; END $$



CREATE EVENT IF NOT EXISTS `EVENT_BLOCKEDS` 
ON SCHEDULE EVERY 15 MINUTE 
DO 
BEGIN
    UPDATE USERS_BLOCKEDS 
    SET Tiempo = CASE WHEN Tiempo > 0 THEN Tiempo - 0.25 ELSE 0 END,
    Estatus = CASE WHEN Tiempo <= 0 THEN 'L' ELSE Estatus END
    WHERE Tiempo > 0;
END$$


CREATE PROCEDURE SP_MOVIMIENTOS
(
IN IN_IDUsuario INT,
IN IN_MOVIMIENTO VARCHAR(50)
)
BEGIN
INSERT INTO AUDITORIA(IDUsuario,Movimiento,Fecha,Hora)
VALUES(IN_IDUsuario,IN_MOVIMIENTO,now(),CURRENT_TIME());
END $$



CREATE PROCEDURE DESBLOQUEAR_USER
( IN IN_ID INT ) BEGIN
UPDATE USERS_BLOCKEDS SET Tiempo = 0, Estatus = 'L' WHERE IDBlock = IN_ID;

IF row_count() > 0 THEN
SELECT 'UDC' AS MENSAJE;

ELSE SELECT 'EDU' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_INSERTAR_NOTIF
(
IN IN_IDEncargado INT,
IN IN_IDCliente INT,
IN IN_FechaNotif DATE,
IN IN_Notificacion JSON,
IN IN_CartaNotif JSON
)
BEGIN

  DECLARE FechaFinal DATE;
    
  SELECT DIASLABORABLES(IN_FechaNotif,5) INTO FechaFinal;

IF (IFNULL((SELECT SUM(JSON_CONTAINS(JSON_EXTRACT(Notificacion, '$[*].NOTIFICACION'), JSON_EXTRACT(IN_Notificacion, '$[*].NOTIFICACION'))) FROM NOTIF_INCONSISTENCIA), 0) = 0) THEN

INSERT INTO NOTIF_INCONSISTENCIA(IDEncargado,IDCliente,FechaNotif,FechaVenci,Notificacion,CartaNotif)
VALUES (IN_IDEncargado,IN_IDCliente,IN_FechaNotif,FechaFinal,IN_Notificacion,IN_CartaNotif);

IF ROW_COUNT() > 0 THEN
SELECT 'NIC' AS MENSAJE;
ELSE SELECT 'EIN' AS MENSAJE;
END IF;

ELSE SELECT 'ENE' AS MENSAJE;
END IF;
END $$


CREATE PROCEDURE SP_INSERT_EMAIL_NOTIF
(
IN IN_NON JSON
) BEGIN

DECLARE IN_IDN INT;

SELECT IDNotificacion FROM NOTIF_INCONSISTENCIA WHERE (SELECT SUM(JSON_CONTAINS(JSON_EXTRACT(Notificacion,'$[*].NOTIFICACION'),IN_NON))) > 0 INTO IN_IDN;

IF EXISTS (SELECT * FROM EMAILS_NOTIF WHERE IDNotif = IN_IDN) THEN SELECT 'EELS' AS 'MENSAJE';

ELSE 
 INSERT INTO EMAILS_NOTIF(IDNotif,HoraRegistro) VALUES(IN_IDN,now());
END IF;
END $$


CREATE PROCEDURE SP_VER_CARTA
(
IN IN_IDNOT INT
)
BEGIN
IF EXISTS (SELECT * FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT) THEN
SELECT CartaNotif AS 'CARTA' FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDNOT;
END IF;
END$$


CREATE PROCEDURE SENDMAIL_NOTIF(IN SEARCH INT) BEGIN
SELECT 
	E.IDNotif,
    C.EmailCliente AS EMCLT,
    C.NombreCliente AS NOCLT, 
    C.TipoCliente,
    N.FechaVenci AS VENCIMIENTO,
    JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION') AS NONOTIF,
    JSON_EXTRACT(N.Notificacion, '$[*].IMPUESTO') AS IMPU,
    N.CartaNotif AS CARTA,
    JSON_LENGTH(N.Notificacion) AS SIZE
FROM EMAILS_NOTIF AS E
JOIN NOTIF_INCONSISTENCIA AS N ON E.IDNotif = N.IDNotificacion
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE E.Estatus = "F" AND N.IDNotificacion = SEARCH;
END $$


CREATE PROCEDURE SP_ELIMINAR_NOTIF
(IN IN_IDN INT, IN IN_NONO VARCHAR(100))
BEGIN

IF NOT EXISTS (
SELECT * FROM NOTIF_INCONSISTENCIA AS N
WHERE IDNotificacion = IN_IDN AND CodigoNotif = IN_NONO) THEN SELECT 'EELS' AS MENSAJE;

ELSE 
	DELETE FROM NOTIF_INCONSISTENCIA WHERE IDNotificacion = IN_IDN; 
    
    IF ROW_COUNT() > 0 THEN SELECT 'NEC' AS MENSAJE;
	ELSE SELECT 'EEN' AS MENSAJE; END IF;
END IF;
END$$


CREATE PROCEDURE SP_INSERTAR_DETALLE
(
IN INCODNOT CHAR(12),
IN INFECHA DATE,
IN INDETALL JSON,
IN INCARTAS JSON,
IN CORAUD varchar(50),
IN NOMAUD varchar(50),
IN TELAUD varchar(20)
) BEGIN

DECLARE INFECVEN DATE;

SELECT DIASLABORABLES(INFECHA,20) INTO INFECVEN;

IF NOT EXISTS 
 (
  SELECT * FROM NOTIF_INCONSISTENCIA WHERE CodigoNotif = INCODNOT
 ) THEN SELECT 'EELS' AS MENSAJE;

ELSE 
 IF EXISTS 
 (
  SELECT * FROM DETALLE_CITACION WHERE 
  CodigoNotif = INCODNOT OR IFNULL((SELECT SUM(JSON_CONTAINS(JSON_EXTRACT(DetallesCitacion, '$[*].NOTIFICACION'), JSON_EXTRACT(INDETALL, '$[*].NOTIFICACION')))), 0) <> 0 
 ) THEN SELECT 'EDCE' AS MENSAJE;

ELSE 
   INSERT INTO DETALLE_CITACION
   ( CodigoNotif, Fecha, FechaVenci, DetallesCitacion, CartasDetalles, CorreoAuditor, NombreAuditor, TelAuditor )
   VALUES(INCODNOT,INFECHA,INFECVEN,INDETALL,INCARTAS,CORAUD,NOMAUD,TELAUD);  

IF ROW_COUNT() > 0 THEN
SELECT 'DIC' AS MENSAJE;
ELSE SELECT 'EID' AS MENSAJE; END IF;

END IF;
END IF;
END $$


CREATE PROCEDURE SP_INSERT_EMAIL_DDC
(
IN IN_CodNot CHAR(12)
) BEGIN

DECLARE IN_IDD INT;

SELECT IDDetalle FROM DETALLE_CITACION WHERE CodigoNotif = IN_CodNot INTO IN_IDD;

IF EXISTS (SELECT * FROM EMAILS_DETALLE WHERE IDDetalle = IN_IDD) 
THEN SELECT 'EELS' AS 'MENSAJE';

ELSE
INSERT INTO EMAILS_DETALLE(IDDetalle,HoraRegistro) VALUES(IN_IDD,now());
END IF;
END $$


CREATE PROCEDURE SP_DELETE_DETALLE
(IN IN_IDD INT,IN IN_CodNot CHAR(12)) BEGIN

IF NOT EXISTS(SELECT * FROM DETALLE_CITACION WHERE IDDetalle = IN_IDD AND CodigoNotif = IN_CodNot) THEN 
SELECT 'EELS' AS MENSAJE;
   
ELSE     
DELETE FROM DETALLE_CITACION WHERE IDDetalle = IN_IDD;
  
IF ROW_COUNT() > 0 THEN SELECT 'DEC' AS MENSAJE;
 ELSE SELECT 'EED' AS MENSAJE; END IF;
END IF;
END $$


CREATE TRIGGER TR_INSERT_NOTIF
BEFORE INSERT ON NOTIF_INCONSISTENCIA
FOR EACH ROW
BEGIN

    DECLARE codigo CHAR(12);
    DECLARE secuencia INT;
    DECLARE aactual INT;

    SET aactual = YEAR(NEW.FechaNotif);
    
    SELECT COALESCE(MAX(CONVERT(SUBSTRING(CodigoNotif, 5, 4), UNSIGNED)), 0) + 1 INTO secuencia
    FROM NOTIF_INCONSISTENCIA;

    SET codigo = CONCAT('FHCF', LPAD(secuencia, 4, '0'), aactual);

    SET NEW.CodigoNotif = codigo;
END$$


CREATE PROCEDURE SP_SEARCH_NOTIF
(Codigo CHAR(12)) BEGIN
IF NOT EXISTS (SELECT JSON_EXTRACT(Notificacion, '$[*].NOTIFICACION') FROM NOTIF_INCONSISTENCIA
WHERE CodigoNotif = Codigo) THEN SELECT 'EELS' AS MENSAJE;

ELSE SELECT JSON_EXTRACT(Notificacion, '$[*].NOTIFICACION') AS MENSAJE FROM NOTIF_INCONSISTENCIA WHERE CodigoNotif = Codigo;
END IF;
END$$


CREATE PROCEDURE SENDMAIL_DETALLE(IN SEARCH INT) BEGIN
SELECT 
	E.IDDetalle,
    C.NombreCliente,
    C.EmailCliente,
    D.FechaVenci,
    D.DetallesCitacion AS INCONSISTENCIAS,
    D.CartasDetalles AS ARCHIVOS,
    JSON_LENGTH(D.DetallesCitacion) AS SIZE
FROM EMAILS_DETALLE AS E
JOIN DETALLE_CITACION AS D ON E.IDDetalle = D.IDDetalle
JOIN NOTIF_INCONSISTENCIA AS N ON D.CodigoNotif = N.CodigoNotif
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE E.Estatus = "F" AND D.IDDetalle = SEARCH;
END $$


CREATE PROCEDURE SP_DETALLES_CASOS
(IN IN_CODIGONOTIF CHAR(12))
BEGIN

IF NOT EXISTS(SELECT * FROM NOTIF_INCONSISTENCIA WHERE CodigoNotif = IN_CODIGONOTIF)
THEN SELECT 'EELS' AS MENSAJE;

ELSE 
SELECT 
	  N.IDNotificacion,
	  N.CodigoNotif,
      C.NombreCliente,
      A.NombreAdm,
      C.EmailCliente,
      N.FechaNotif,
      N.Fechavenci,
      N.Notificacion,
      EN.Estatus,
      D.IDDetalle,
      D.Fecha AS FechaDC,
      D.FechaVenci AS FechaVenciDC,
      ED.Estatus AS EstatusDC,
      D.DetallesCitacion,
      E.IDEscrito,
      E.FechaEscrito,
      E.FechaVenci AS FechaVenciED,
      EE.Estatus AS EstatusED ,
      RD.IDRespuesta,
      RD.FechaRespuesta,
      RD.TipoRespuesta,
      RD.Comentarios,
      ERD.Estatus AS EstatusRespuesta
      FROM
NOTIF_INCONSISTENCIA AS N
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
JOIN ADM AS A ON C.IDADM = A.IDADM
LEFT JOIN EMAILS_NOTIF AS EN ON N.IDNotificacion = EN.IDNotif  
LEFT JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
LEFT JOIN EMAILS_DETALLE AS ED ON D.IDDetalle = ED.IDDetalle
LEFT JOIN ESCRITO_DESCARGO AS E ON N.CodigoNotif = E.CodigoNotif
LEFT JOIN EMAILS_ESCRITO AS EE ON E.IDEscrito = EE.IDEscrito
LEFT JOIN RESPUESTA_DGII AS RD ON N.CodigoNotif = RD.CodigoNotif
LEFT JOIN EMAILS_RESPUESTA AS ERD ON RD.IDRespuesta = ERD.IDRespuesta
WHERE N.CodigoNotif = IN_CODIGONOTIF;
END IF;

END$$


CREATE PROCEDURE SP_INSERT_EDD
(
IN INCODNOT CHAR(12),
IN INFECHA DATE,
IN INESCRITO longtext
)BEGIN

DECLARE INFECVEN DATE;

SELECT DIASLABORABLES(INFECHA,90) INTO INFECVEN;

IF EXISTS (SELECT * FROM ESCRITO_DESCARGO WHERE CodigoNotif = INCODNOT) THEN 
SELECT 'EEDDE' AS MENSAJE;

ELSE 
 INSERT INTO ESCRITO_DESCARGO(CodigoNotif,ArchivoEscrito,FechaEscrito,FechaVenci) VALUES(INCODNOT,INESCRITO,INFECHA,INFECVEN);
 
 IF ROW_COUNT() > 0 THEN
 SELECT 'EDDIC' AS MENSAJE;
 ELSE SELECT 'EIEDD' AS MENSAJE;
 END IF;
 
END IF;
END$$


CREATE PROCEDURE SP_INSERT_EMAIL_EDD
(
IN IN_CodNot char(12)
) BEGIN

DECLARE IN_IDE INT;

SELECT IDEscrito FROM ESCRITO_DESCARGO WHERE CodigoNotif = IN_CodNot INTO IN_IDE;

IF EXISTS (SELECT * FROM EMAILS_ESCRITO WHERE IDEscrito  = IN_IDE) 
THEN SELECT 'EELS' AS 'MENSAJE';

ELSE
INSERT INTO EMAILS_ESCRITO(IDEscrito,HoraRegistro)
VALUES(IN_IDE,now());
END IF;
END $$


CREATE PROCEDURE SENDMAIL_ESCRITO(IN SEARCH INT) BEGIN
SELECT 
	E.IDEscrito,
    C.NombreCliente,
    C.EmailCliente,
    E.ArchivoEscrito,
	JSON_EXTRACT(D.DetallesCitacion, '$[*].DETALLES[0].NOCaso') AS NOCASO,
    JSON_EXTRACT(N.Notificacion, '$[*].NOTIFICACION') AS NONOTIF,
    JSON_LENGTH(N.Notificacion, '$[*].NOTIFICACION') AS SIZE
FROM ESCRITO_DESCARGO AS E
JOIN EMAILS_ESCRITO AS EE ON E.IDEscrito = EE.IDEscrito
JOIN NOTIF_INCONSISTENCIA AS N ON E.CodigoNotif = N.CodigoNotif
JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE EE.Estatus = "F" AND EE.IDEscrito = SEARCH;
END $$


CREATE PROCEDURE SP_DELETE_EDD
(IN IN_IDE INT,IN IN_CodNot CHAR(12)) BEGIN

IF NOT EXISTS(SELECT * FROM ESCRITO_DESCARGO WHERE IDEscrito = IN_IDE AND CodigoNotif = IN_CodNot) THEN 
SELECT 'EELS' AS MENSAJE;
   
ELSE     
DELETE FROM ESCRITO_DESCARGO WHERE IDEscrito = IN_IDE;
  
IF ROW_COUNT() > 0 THEN SELECT 'EDDEC' AS MENSAJE;
 ELSE SELECT 'EEEDD' AS MENSAJE; END IF;
END IF;
END $$


CREATE PROCEDURE SP_INSERT_RES
(
IN INCODNOT CHAR(12),
IN INFECHA DATE,
IN INCOMENTS TEXT,
IN INTIPO ENUM('Acta de descargo','Aceptacion de inconsistencia','Resolucion de determinacion'),
IN INESCRITO JSON
) BEGIN

DECLARE INFECVEN DATE;

SELECT IF(INTIPO != 'Resolucion de determinacion',NULL,(DIASLABORABLES(INFECHA,90))) INTO INFECVEN;

IF EXISTS (SELECT * FROM RESPUESTA_DGII WHERE CodigoNotif = INCODNOT) THEN 
SELECT 'ERYE' AS MENSAJE;

ELSE 
 INSERT INTO RESPUESTA_DGII(CodigoNotif,FechaRespuesta,FechaVenci,Comentarios,TipoRespuesta,ArchivoRespuesta) VALUES(INCODNOT,INFECHA,INFECVEN,INCOMENTS,INTIPO,INESCRITO);
 
 IF ROW_COUNT() > 0 THEN
 SELECT 'RIC' AS MENSAJE;
 ELSE SELECT 'EIR' AS MENSAJE;
 END IF;
 
END IF;
END$$


CREATE PROCEDURE SP_DELETE_RES
(IN IN_IDR INT,IN IN_CodNot CHAR(12)) BEGIN

IF NOT EXISTS(SELECT * FROM RESPUESTA_DGII WHERE IDRespuesta = IN_IDR AND CodigoNotif = IN_CodNot) THEN 
SELECT 'EELS' AS MENSAJE;
   
ELSE     
DELETE FROM RESPUESTA_DGII WHERE IDRespuesta = IN_IDR;
  
IF ROW_COUNT() > 0 THEN SELECT 'REL' AS MENSAJE;
 ELSE SELECT 'EER' AS MENSAJE; END IF;
END IF;
END $$


CREATE PROCEDURE SP_INSERT_EMAIL_RES
(
IN IN_CodNot char(12)
) BEGIN

DECLARE IN_ID INT;

SELECT IDRespuesta FROM RESPUESTA_DGII WHERE CodigoNotif = IN_CodNot INTO IN_ID;

IF EXISTS (SELECT * FROM EMAILS_RESPUESTA WHERE IDRespuesta  = IN_ID) 
THEN SELECT 'EELS' AS 'MENSAJE';

ELSE
INSERT INTO EMAILS_RESPUESTA(IDRespuesta,HoraRegistro)
VALUES(IN_ID,now());
END IF;
END $$


CREATE PROCEDURE SP_ADD_CC
(INID INT, INTIPO VARCHAR(3), INCC JSON)
BEGIN

DECLARE INCLIENTE INT;
DECLARE NTABLA VARCHAR(20);
DECLARE ColIDName VARCHAR(15);
    
    IF INTIPO = 'EDD' THEN
        SET NTABLA = 'ESCRITO_DESCARGO';
        SET ColIDName = 'IDEscrito';
    ELSEIF INTIPO = 'DDC' THEN
        SET NTABLA = 'DETALLE_CITACION';
        SET ColIDName = 'IDDetalle';
    ELSEIF INTIPO = 'NTF' THEN
        SET NTABLA = 'NOTIF_INCONSISTENCIA';
        SET ColIDName = 'IDNotificacion';
    ELSEIF INTIPO = 'RES' THEN
        SET NTABLA = 'RESPUESTA_DGII';
        SET ColIDName = 'IDRespuesta';
    ELSEIF INTIPO = 'PRG' THEN
        SET NTABLA = 'PRORROGA';
        SET ColIDName = 'IDProrroga';
    END IF;

	SET @SENTENCE = CONCAT('SELECT C.IDCliente INTO @INCLIENTE FROM ',NTABLA,' AS T1 JOIN NOTIF_INCONSISTENCIA AS N ON N.CodigoNotif = T1.CodigoNotif JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente WHERE T1.',ColIDName,' = ',INID);
 
     PREPARE stmt FROM @SENTENCE;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
	SELECT @INCLIENTE INTO INCLIENTE;
    
    SET @SENTENCE = NULL;   SET @INCLIENTE = NULL;
 
IF (SELECT IFNULL(SUM(JSON_CONTAINS(CC, INCC)), 0) FROM CLIENTES WHERE IDCliente = INCLIENTE) = 0 THEN
UPDATE CLIENTES SET CC = INCC WHERE IDCliente = INCLIENTE;
END IF;
END$$


CREATE PROCEDURE SP_GET_CC (IN INID INT, IN INTIPO VARCHAR(3))
BEGIN
	
	DECLARE NTABLA VARCHAR(20);
    DECLARE ColIDName VARCHAR(15);
    
    IF INTIPO = 'EDD' THEN
        SET NTABLA = 'ESCRITO_DESCARGO';
        SET ColIDName = 'IDEscrito';
    ELSEIF INTIPO = 'DDC' THEN
        SET NTABLA = 'DETALLE_CITACION';
        SET ColIDName = 'IDDetalle';
    ELSEIF INTIPO = 'NTF' THEN
        SET NTABLA = 'NOTIF_INCONSISTENCIA';
        SET ColIDName = 'IDNotificacion';
    ELSEIF INTIPO = 'RES' THEN
        SET NTABLA = 'RESPUESTA_DGII';
        SET ColIDName = 'IDRespuesta';
    ELSEIF INTIPO = 'PRG' THEN
        SET NTABLA = 'PRORROGA';
        SET ColIDName = 'IDProrroga';
    END IF;
    
    SET @SENTENCE = CONCAT('SELECT C.EmailCliente,C.CC FROM ',NTABLA,
    ' AS T1 JOIN NOTIF_INCONSISTENCIA AS N ON N.CodigoNotif = T1.CodigoNotif JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente WHERE T1.',ColIDName,' = ', INID);
    
    PREPARE stmt FROM @SENTENCE;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    SET @SENTENCE = NULL;

END$$


CREATE PROCEDURE SENDMAIL_RESPUESTA(IN SEARCH INT) BEGIN
SELECT 
	RD.IDRespuesta,
    C.NombreCliente,
    C.EmailCliente,
    RD.ArchivoRespuesta,
    RD.TipoRespuesta,
    RD.Comentarios
FROM RESPUESTA_DGII AS RD
JOIN EMAILS_RESPUESTA AS ER ON RD.IDRespuesta = ER.IDRespuesta
JOIN NOTIF_INCONSISTENCIA AS N ON RD.CodigoNotif = N.CodigoNotif
JOIN DETALLE_CITACION AS D ON N.CodigoNotif = D.CodigoNotif
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE ER.Estatus = "F" AND RD.IDRespuesta = SEARCH;
END $$


CREATE PROCEDURE SP_INSERT_PRORROGA
(
 IN INCodigoNotif CHAR(12),
 IN INFechaPRG DATE,
 IN INComentsPRG TEXT,
 IN INArchivosPRG JSON
) BEGIN

 INSERT INTO PRORROGA(CodigoNotif,FechaProrroga,ArchivoProrroga,ComentarioProrroga,HoraRegistro)
 VALUES(INCodigoNotif,INFechaPRG,INArchivosPRG,INComentsPRG,NOW());
 
 IF ROW_COUNT() > 0 THEN SELECT 'PIC' AS MENSAJE;
 ELSE SELECT 'EAIP' AS MENSAJE;
 END IF;
END $$


CREATE PROCEDURE SENDMAIL_PRORROGA(IN SEARCH INT) BEGIN
SELECT 
	PR.IDProrroga,
    PR.CodigoNotif,
    C.NombreCliente,
    C.EmailCliente,
    PR.ArchivoProrroga,
    PR.ComentarioProrroga
FROM PRORROGA AS PR
JOIN NOTIF_INCONSISTENCIA AS N ON PR.CodigoNotif = N.CodigoNotif
JOIN CLIENTES AS C ON N.IDCliente = C.IDCliente
WHERE PR.Estatus = "F" AND PR.IDProrroga = SEARCH;
END $$


CREATE PROCEDURE SP_AUMENTAR_PRG(IN INCodigoNotif CHAR(12)) 
BEGIN
    DECLARE TABLA VARCHAR(20);
    DECLARE FechaFinal DATE;

    -- Seleccionar la tabla
    IF EXISTS(SELECT CodigoNotif FROM RESPUESTA_DGII WHERE CodigoNotif = INCodigoNotif) THEN
        SET TABLA = 'RESPUESTA_DGII';
    ELSEIF EXISTS(SELECT CodigoNotif FROM ESCRITO_DESCARGO WHERE CodigoNotif = INCodigoNotif) THEN
        SET TABLA = 'ESCRITO_DESCARGO';
    ELSEIF EXISTS(SELECT CodigoNotif FROM DETALLE_CITACION WHERE CodigoNotif = INCodigoNotif) THEN
        SET TABLA = 'DETALLE_CITACION';
    ELSE
        SET TABLA = 'NOTIF_INCONSISTENCIA';
    END IF;

    -- Calcular la nueva fecha de vencimiento usando una función y actualizando el registro
    SET @FSENTENCE = CONCAT('SELECT DIASLABORABLES(FechaVenci, 10) INTO @FechaFinal FROM ', TABLA, ' WHERE CodigoNotif = ''', INCodigoNotif, '''');
    PREPARE stmt FROM @FSENTENCE;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    -- Actualizar la fecha de vencimiento en la tabla correspondiente
    SET @SENTENCE = CONCAT('UPDATE ', TABLA, ' SET FechaVenci = @FechaFinal WHERE CodigoNotif = ''', INCodigoNotif, '''');
    PREPARE stmt FROM @SENTENCE;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    -- Limpiar variables temporales
    SET @FSENTENCE = NULL;
    SET @SENTENCE = NULL;
    SET @FechaFinal = NULL;
END $$



CREATE PROCEDURE SP_DELETE_PRG
(IN IN_IDP INT,IN IN_CodNot CHAR(12)) BEGIN

IF NOT EXISTS(SELECT * FROM ALL_PRORROGA WHERE IDProrroga = IN_IDP AND CodigoNotif = IN_CodNot) THEN 
SELECT 'EELS' AS MENSAJE;
   
ELSE     
DELETE FROM PRORROGA WHERE IDProrroga = IN_IDP;
  
IF ROW_COUNT() > 0 THEN SELECT 'PEC' AS MENSAJE;
 ELSE SELECT 'EEP' AS MENSAJE; END IF;
END IF;
END $$